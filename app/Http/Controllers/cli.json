{
  "notifier": "Laravel Client",
  "language": "PHP",
  "framework_version": "9.17.0",
  "language_version": "8.1.7",
  "exception_class": "Exception",
  "seen_at": 1655569767,
  "message": "Command",
  "glows": [],
  "solutions": [],
  "documentation_links": [],
  "stacktrace": [
    {
      "file": "\/home\/alex\/Code\/open-flare\/app\/Console\/Commands\/TryCommand.php",
      "line_number": 38,
      "method": "handle",
      "class": "App\\Console\\Commands\\TryCommand",
      "code_snippet": {
        "14": "{",
        "15": "\/**",
        "16": "* The name and signature of the console command.",
        "17": "*",
        "18": "* @var string",
        "19": "*\/",
        "20": "protected $signature = 'try';",
        "21": null,
        "22": "\/**",
        "23": "* The console command description.",
        "24": "*",
        "25": "* @var string",
        "26": "*\/",
        "27": "protected $description = 'Command description';",
        "28": null,
        "29": "\/**",
        "30": "* Execute the console command.",
        "31": "*",
        "32": "* @return int",
        "33": "*\/",
        "34": "public function handle()",
        "35": "{",
        "36": "User::all();",
        "37": "\\Illuminate\\Support\\Facades\\Log::debug('Test');",
        "38": "throw new \\Exception(\"Command\");",
        "39": null,
        "40": "return 0;",
        "41": "}",
        "42": "}",
        "43": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 36,
      "method": "Illuminate\\Container\\{closure}",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "21": "*",
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Util.php",
      "line_number": 41,
      "method": "unwrapIfClosure",
      "class": "Illuminate\\Container\\Util",
      "code_snippet": {
        "26": null,
        "27": "return is_array($value) ? $value : [$value];",
        "28": "}",
        "29": null,
        "30": "\/**",
        "31": "* Return the default value of the given value.",
        "32": "*",
        "33": "* From global value() helper in Illuminate\\Support.",
        "34": "*",
        "35": "* @param  mixed  $value",
        "36": "* @param  mixed  ...$args",
        "37": "* @return mixed",
        "38": "*\/",
        "39": "public static function unwrapIfClosure($value, ...$args)",
        "40": "{",
        "41": "return $value instanceof Closure ? $value(...$args) : $value;",
        "42": "}",
        "43": null,
        "44": "\/**",
        "45": "* Get the class name of the given parameter's type, if possible.",
        "46": "*",
        "47": "* From Reflector::getParameterClassName() in Illuminate\\Support.",
        "48": "*",
        "49": "* @param  \\ReflectionParameter  $parameter",
        "50": "* @return string|null",
        "51": "*\/",
        "52": "public static function getParameterClassName($parameter)",
        "53": "{",
        "54": "$type = $parameter->getType();",
        "55": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 93,
      "method": "callBoundMethod",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "78": "protected static function callBoundMethod($container, $callback, $default)",
        "79": "{",
        "80": "if (! is_array($callback)) {",
        "81": "return Util::unwrapIfClosure($default);",
        "82": "}",
        "83": null,
        "84": "\/\/ Here we need to turn the array callable into a Class@method string we can use to",
        "85": "\/\/ examine the container and see if there are any method bindings for this given",
        "86": "\/\/ method. If there are, we can call this method binding callback immediately.",
        "87": "$method = static::normalizeMethod($callback);",
        "88": null,
        "89": "if ($container->hasMethodBinding($method)) {",
        "90": "return $container->callMethodBinding($method, $callback[0]);",
        "91": "}",
        "92": null,
        "93": "return Util::unwrapIfClosure($default);",
        "94": "}",
        "95": null,
        "96": "\/**",
        "97": "* Normalize the given callback into a Class@method string.",
        "98": "*",
        "99": "* @param  callable  $callback",
        "100": "* @return string",
        "101": "*\/",
        "102": "protected static function normalizeMethod($callback)",
        "103": "{",
        "104": "$class = is_string($callback[0]) ? $callback[0] : get_class($callback[0]);",
        "105": null,
        "106": "return \"{$class}@{$callback[1]}\";",
        "107": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 37,
      "method": "call",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/",
        "51": "protected static function callClass($container, $target, array $parameters = [], $defaultMethod = null)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Container.php",
      "line_number": 651,
      "method": "call",
      "class": "Illuminate\\Container\\Container",
      "code_snippet": {
        "636": "};",
        "637": "}",
        "638": null,
        "639": "\/**",
        "640": "* Call the given Closure \/ class@method and inject its dependencies.",
        "641": "*",
        "642": "* @param  callable|string  $callback",
        "643": "* @param  array<string, mixed>  $parameters",
        "644": "* @param  string|null  $defaultMethod",
        "645": "* @return mixed",
        "646": "*",
        "647": "* @throws \\InvalidArgumentException",
        "648": "*\/",
        "649": "public function call($callback, array $parameters = [], $defaultMethod = null)",
        "650": "{",
        "651": "return BoundMethod::call($this, $callback, $parameters, $defaultMethod);",
        "652": "}",
        "653": null,
        "654": "\/**",
        "655": "* Get a closure to resolve the given type from the container.",
        "656": "*",
        "657": "* @param  string  $abstract",
        "658": "* @return \\Closure",
        "659": "*\/",
        "660": "public function factory($abstract)",
        "661": "{",
        "662": "return function () use ($abstract) {",
        "663": "return $this->make($abstract);",
        "664": "};",
        "665": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Command.php",
      "line_number": 136,
      "method": "execute",
      "class": "Illuminate\\Console\\Command",
      "code_snippet": {
        "121": "$this->input = $input, $this->output",
        "122": ");",
        "123": "}",
        "124": null,
        "125": "\/**",
        "126": "* Execute the console command.",
        "127": "*",
        "128": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "129": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output",
        "130": "* @return int",
        "131": "*\/",
        "132": "protected function execute(InputInterface $input, OutputInterface $output)",
        "133": "{",
        "134": "$method = method_exists($this, 'handle') ? 'handle' : '__invoke';",
        "135": null,
        "136": "return (int) $this->laravel->call([$this, $method]);",
        "137": "}",
        "138": null,
        "139": "\/**",
        "140": "* Resolve the console command instance for the given command.",
        "141": "*",
        "142": "* @param  \\Symfony\\Component\\Console\\Command\\Command|string  $command",
        "143": "* @return \\Symfony\\Component\\Console\\Command\\Command",
        "144": "*\/",
        "145": "protected function resolveCommand($command)",
        "146": "{",
        "147": "if (! class_exists($command)) {",
        "148": "return $this->getApplication()->find($command);",
        "149": "}",
        "150": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Command\/Command.php",
      "line_number": 308,
      "method": "run",
      "class": "Symfony\\Component\\Console\\Command\\Command",
      "code_snippet": {
        "293": "$this->interact($input, $output);",
        "294": "}",
        "295": null,
        "296": "\/\/ The command name argument is often omitted when a command is executed directly with its run() method.",
        "297": "\/\/ It would fail the validation if we didn't make sure the command argument is present,",
        "298": "\/\/ since it's required by the application.",
        "299": "if ($input->hasArgument('command') && null === $input->getArgument('command')) {",
        "300": "$input->setArgument('command', $this->getName());",
        "301": "}",
        "302": null,
        "303": "$input->validate();",
        "304": null,
        "305": "if ($this->code) {",
        "306": "$statusCode = ($this->code)($input, $output);",
        "307": "} else {",
        "308": "$statusCode = $this->execute($input, $output);",
        "309": null,
        "310": "if (!\\is_int($statusCode)) {",
        "311": "throw new \\TypeError(sprintf('Return value of \"%s::execute()\" must be of the type int, \"%s\" returned.', static::class, get_debug_type($statusCode)));",
        "312": "}",
        "313": "}",
        "314": null,
        "315": "return is_numeric($statusCode) ? (int) $statusCode : 0;",
        "316": "}",
        "317": null,
        "318": "\/**",
        "319": "* Adds suggestions to $suggestions for the current completion input (e.g. option or argument).",
        "320": "*\/",
        "321": "public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void",
        "322": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Command.php",
      "line_number": 121,
      "method": "run",
      "class": "Illuminate\\Console\\Command",
      "code_snippet": {
        "106": null,
        "107": "\/**",
        "108": "* Run the console command.",
        "109": "*",
        "110": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "111": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output",
        "112": "* @return int",
        "113": "*\/",
        "114": "public function run(InputInterface $input, OutputInterface $output): int",
        "115": "{",
        "116": "$this->output = $this->laravel->make(",
        "117": "OutputStyle::class, ['input' => $input, 'output' => $output]",
        "118": ");",
        "119": null,
        "120": "return parent::run(",
        "121": "$this->input = $input, $this->output",
        "122": ");",
        "123": "}",
        "124": null,
        "125": "\/**",
        "126": "* Execute the console command.",
        "127": "*",
        "128": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "129": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output",
        "130": "* @return int",
        "131": "*\/",
        "132": "protected function execute(InputInterface $input, OutputInterface $output)",
        "133": "{",
        "134": "$method = method_exists($this, 'handle') ? 'handle' : '__invoke';",
        "135": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php",
      "line_number": 998,
      "method": "doRunCommand",
      "class": "Symfony\\Component\\Console\\Application",
      "code_snippet": {
        "983": "if (!$hasNext) {",
        "984": "if (!\\in_array($signal, [\\SIGUSR1, \\SIGUSR2], true)) {",
        "985": "exit(0);",
        "986": "}",
        "987": "}",
        "988": "});",
        "989": "}",
        "990": "}",
        "991": null,
        "992": "foreach ($command->getSubscribedSignals() as $signal) {",
        "993": "$this->signalRegistry->register($signal, [$command, 'handleSignal']);",
        "994": "}",
        "995": "}",
        "996": null,
        "997": "if (null === $this->dispatcher) {",
        "998": "return $command->run($input, $output);",
        "999": "}",
        "1000": null,
        "1001": "\/\/ bind before the console.command event, so the listeners have access to input options\/arguments",
        "1002": "try {",
        "1003": "$command->mergeApplicationDefinition();",
        "1004": "$input->bind($command->getDefinition());",
        "1005": "} catch (ExceptionInterface) {",
        "1006": "\/\/ ignore invalid options\/arguments for now, to allow the event listeners to customize the InputDefinition",
        "1007": "}",
        "1008": null,
        "1009": "$event = new ConsoleCommandEvent($command, $input, $output);",
        "1010": "$e = null;",
        "1011": null,
        "1012": "try {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php",
      "line_number": 299,
      "method": "doRun",
      "class": "Symfony\\Component\\Console\\Application",
      "code_snippet": {
        "284": null,
        "285": "return $event->getExitCode();",
        "286": "}",
        "287": null,
        "288": "return 1;",
        "289": "}",
        "290": null,
        "291": "$command = $this->find($alternative);",
        "292": "}",
        "293": null,
        "294": "if ($command instanceof LazyCommand) {",
        "295": "$command = $command->getCommand();",
        "296": "}",
        "297": null,
        "298": "$this->runningCommand = $command;",
        "299": "$exitCode = $this->doRunCommand($command, $input, $output);",
        "300": "$this->runningCommand = null;",
        "301": null,
        "302": "return $exitCode;",
        "303": "}",
        "304": null,
        "305": "\/**",
        "306": "* {@inheritdoc}",
        "307": "*\/",
        "308": "public function reset()",
        "309": "{",
        "310": "}",
        "311": null,
        "312": "public function setHelperSet(HelperSet $helperSet)",
        "313": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php",
      "line_number": 171,
      "method": "run",
      "class": "Symfony\\Component\\Console\\Application",
      "code_snippet": {
        "156": "$this->renderThrowable($e, $output);",
        "157": "}",
        "158": "};",
        "159": "if ($phpHandler = set_exception_handler($renderException)) {",
        "160": "restore_exception_handler();",
        "161": "if (!\\is_array($phpHandler) || !$phpHandler[0] instanceof ErrorHandler) {",
        "162": "$errorHandler = true;",
        "163": "} elseif ($errorHandler = $phpHandler[0]->setExceptionHandler($renderException)) {",
        "164": "$phpHandler[0]->setExceptionHandler($errorHandler);",
        "165": "}",
        "166": "}",
        "167": null,
        "168": "$this->configureIO($input, $output);",
        "169": null,
        "170": "try {",
        "171": "$exitCode = $this->doRun($input, $output);",
        "172": "} catch (\\Exception $e) {",
        "173": "if (!$this->catchExceptions) {",
        "174": "throw $e;",
        "175": "}",
        "176": null,
        "177": "$renderException($e);",
        "178": null,
        "179": "$exitCode = $e->getCode();",
        "180": "if (is_numeric($exitCode)) {",
        "181": "$exitCode = (int) $exitCode;",
        "182": "if ($exitCode <= 0) {",
        "183": "$exitCode = 1;",
        "184": "}",
        "185": "} else {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Application.php",
      "line_number": 102,
      "method": "run",
      "class": "Illuminate\\Console\\Application",
      "code_snippet": {
        "87": "*",
        "88": "* @return int",
        "89": "*\/",
        "90": "public function run(InputInterface $input = null, OutputInterface $output = null): int",
        "91": "{",
        "92": "$commandName = $this->getCommandName(",
        "93": "$input = $input ?: new ArgvInput",
        "94": ");",
        "95": null,
        "96": "$this->events->dispatch(",
        "97": "new CommandStarting(",
        "98": "$commandName, $input, $output = $output ?: new BufferedConsoleOutput",
        "99": ")",
        "100": ");",
        "101": null,
        "102": "$exitCode = parent::run($input, $output);",
        "103": null,
        "104": "$this->events->dispatch(",
        "105": "new CommandFinished($commandName, $input, $output, $exitCode)",
        "106": ");",
        "107": null,
        "108": "return $exitCode;",
        "109": "}",
        "110": null,
        "111": "\/**",
        "112": "* Determine the proper PHP executable.",
        "113": "*",
        "114": "* @return string",
        "115": "*\/",
        "116": "public static function phpBinary()"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Console\/Kernel.php",
      "line_number": 129,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Console\\Kernel",
      "code_snippet": {
        "114": "return $this->app['config']->get('cache.schedule_store', Env::get('SCHEDULE_CACHE_DRIVER'));",
        "115": "}",
        "116": null,
        "117": "\/**",
        "118": "* Run the console application.",
        "119": "*",
        "120": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "121": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface|null  $output",
        "122": "* @return int",
        "123": "*\/",
        "124": "public function handle($input, $output = null)",
        "125": "{",
        "126": "try {",
        "127": "$this->bootstrap();",
        "128": null,
        "129": "return $this->getArtisan()->run($input, $output);",
        "130": "} catch (Throwable $e) {",
        "131": "$this->reportException($e);",
        "132": null,
        "133": "$this->renderException($output, $e);",
        "134": null,
        "135": "return 1;",
        "136": "}",
        "137": "}",
        "138": null,
        "139": "\/**",
        "140": "* Terminate the application.",
        "141": "*",
        "142": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "143": "* @param  int  $status"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/artisan",
      "line_number": 37,
      "method": "[top]",
      "class": null,
      "code_snippet": {
        "22": "\/*",
        "23": "|--------------------------------------------------------------------------",
        "24": "| Run The Artisan Application",
        "25": "|--------------------------------------------------------------------------",
        "26": "|",
        "27": "| When we run the console application, the current CLI command will be",
        "28": "| executed in this console and the response sent back to a terminal",
        "29": "| or another output device for the developers. Here goes nothing!",
        "30": "|",
        "31": "*\/",
        "32": null,
        "33": "$kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);",
        "34": null,
        "35": "$status = $kernel->handle(",
        "36": "$input = new Symfony\\Component\\Console\\Input\\ArgvInput,",
        "37": "new Symfony\\Component\\Console\\Output\\ConsoleOutput",
        "38": ");",
        "39": null,
        "40": "\/*",
        "41": "|--------------------------------------------------------------------------",
        "42": "| Shutdown The Application",
        "43": "|--------------------------------------------------------------------------",
        "44": "|",
        "45": "| Once Artisan has finished running, we will fire off the shutdown events",
        "46": "| so that any final work may be done by the application before we shut",
        "47": "| down the process. This is the last thing to happen to the request.",
        "48": "|",
        "49": "*\/",
        "50": null,
        "51": "$kernel->terminate($input, $status);"
      },
      "application_frame": false
    }
  ],
  "context": {
    "arguments": [
      "artisan",
      "try"
    ],
    "env": {
      "php_version": "8.1.7",
      "laravel_version": "9.17.0",
      "laravel_locale": "en",
      "laravel_config_cached": false,
      "app_debug": true,
      "app_env": "local"
    },
    "request": {
      "ip": null
    },
    "git": {
      "hash": "1876976ec3ea8672c69e3f9e5ea2f8e43d6454b9",
      "message": "Stacktrace and error-handling added",
      "tag": null,
      "remote": "git@github.com:Wulfheart\/open-flare.git",
      "isDirty": true
    },
    "dumps": [],
    "logs": [
      {
        "message": "Test",
        "level": "debug",
        "context": [],
        "microtime": 1655569767.177101
      }
    ],
    "queries": [
      {
        "sql": "select * from `users`",
        "time": 2.47,
        "connection_name": "mysql",
        "bindings": [],
        "microtime": 1655569767.16927
      }
    ]
  },
  "stage": "local",
  "message_level": null,
  "open_frame_index": null,
  "application_path": null,
  "application_version": null,
  "tracking_uuid": "6df0c258-bfc5-4863-b4cb-d3df8969be01"
}