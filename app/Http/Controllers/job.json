{
  "notifier": "Laravel Client",
  "language": "PHP",
  "framework_version": "9.17.0",
  "language_version": "8.1.3",
  "exception_class": "Exception",
  "seen_at": 1655764223,
  "message": "JobException",
  "glows": [],
  "solutions": [],
  "documentation_links": [],
  "stacktrace": [
    {
      "file": "\/home\/alex\/Code\/open-flare\/app\/Jobs\/TestJob.php",
      "line_number": 33,
      "method": "handle",
      "class": "App\\Jobs\\TestJob",
      "code_snippet": {
        "7": "use Illuminate\\Contracts\\Queue\\ShouldQueue;",
        "8": "use Illuminate\\Foundation\\Bus\\Dispatchable;",
        "9": "use Illuminate\\Queue\\InteractsWithQueue;",
        "10": "use Illuminate\\Queue\\SerializesModels;",
        "11": null,
        "12": "class TestJob implements ShouldQueue",
        "13": "{",
        "14": "use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;",
        "15": null,
        "16": "\/**",
        "17": "* Create a new job instance.",
        "18": "*",
        "19": "* @return void",
        "20": "*\/",
        "21": "public function __construct()",
        "22": "{",
        "23": "\/\/",
        "24": "}",
        "25": null,
        "26": "\/**",
        "27": "* Execute the job.",
        "28": "*",
        "29": "* @return void",
        "30": "*\/",
        "31": "public function handle()",
        "32": "{",
        "33": "throw new \\Exception(\"JobException\");",
        "34": "}",
        "35": "}",
        "36": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 36,
      "method": "Illuminate\\Container\\{closure}",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "21": "*",
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Util.php",
      "line_number": 41,
      "method": "unwrapIfClosure",
      "class": "Illuminate\\Container\\Util",
      "code_snippet": {
        "26": null,
        "27": "return is_array($value) ? $value : [$value];",
        "28": "}",
        "29": null,
        "30": "\/**",
        "31": "* Return the default value of the given value.",
        "32": "*",
        "33": "* From global value() helper in Illuminate\\Support.",
        "34": "*",
        "35": "* @param  mixed  $value",
        "36": "* @param  mixed  ...$args",
        "37": "* @return mixed",
        "38": "*\/",
        "39": "public static function unwrapIfClosure($value, ...$args)",
        "40": "{",
        "41": "return $value instanceof Closure ? $value(...$args) : $value;",
        "42": "}",
        "43": null,
        "44": "\/**",
        "45": "* Get the class name of the given parameter's type, if possible.",
        "46": "*",
        "47": "* From Reflector::getParameterClassName() in Illuminate\\Support.",
        "48": "*",
        "49": "* @param  \\ReflectionParameter  $parameter",
        "50": "* @return string|null",
        "51": "*\/",
        "52": "public static function getParameterClassName($parameter)",
        "53": "{",
        "54": "$type = $parameter->getType();",
        "55": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 93,
      "method": "callBoundMethod",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "78": "protected static function callBoundMethod($container, $callback, $default)",
        "79": "{",
        "80": "if (! is_array($callback)) {",
        "81": "return Util::unwrapIfClosure($default);",
        "82": "}",
        "83": null,
        "84": "\/\/ Here we need to turn the array callable into a Class@method string we can use to",
        "85": "\/\/ examine the container and see if there are any method bindings for this given",
        "86": "\/\/ method. If there are, we can call this method binding callback immediately.",
        "87": "$method = static::normalizeMethod($callback);",
        "88": null,
        "89": "if ($container->hasMethodBinding($method)) {",
        "90": "return $container->callMethodBinding($method, $callback[0]);",
        "91": "}",
        "92": null,
        "93": "return Util::unwrapIfClosure($default);",
        "94": "}",
        "95": null,
        "96": "\/**",
        "97": "* Normalize the given callback into a Class@method string.",
        "98": "*",
        "99": "* @param  callable  $callback",
        "100": "* @return string",
        "101": "*\/",
        "102": "protected static function normalizeMethod($callback)",
        "103": "{",
        "104": "$class = is_string($callback[0]) ? $callback[0] : get_class($callback[0]);",
        "105": null,
        "106": "return \"{$class}@{$callback[1]}\";",
        "107": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 37,
      "method": "call",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/",
        "51": "protected static function callClass($container, $target, array $parameters = [], $defaultMethod = null)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Container.php",
      "line_number": 651,
      "method": "call",
      "class": "Illuminate\\Container\\Container",
      "code_snippet": {
        "636": "};",
        "637": "}",
        "638": null,
        "639": "\/**",
        "640": "* Call the given Closure \/ class@method and inject its dependencies.",
        "641": "*",
        "642": "* @param  callable|string  $callback",
        "643": "* @param  array<string, mixed>  $parameters",
        "644": "* @param  string|null  $defaultMethod",
        "645": "* @return mixed",
        "646": "*",
        "647": "* @throws \\InvalidArgumentException",
        "648": "*\/",
        "649": "public function call($callback, array $parameters = [], $defaultMethod = null)",
        "650": "{",
        "651": "return BoundMethod::call($this, $callback, $parameters, $defaultMethod);",
        "652": "}",
        "653": null,
        "654": "\/**",
        "655": "* Get a closure to resolve the given type from the container.",
        "656": "*",
        "657": "* @param  string  $abstract",
        "658": "* @return \\Closure",
        "659": "*\/",
        "660": "public function factory($abstract)",
        "661": "{",
        "662": "return function () use ($abstract) {",
        "663": "return $this->make($abstract);",
        "664": "};",
        "665": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 128,
      "method": "Illuminate\\Bus\\{closure}",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "113": "in_array(Queueable::class, $uses) &&",
        "114": "! $command->job) {",
        "115": "$command->setJob(new SyncJob($this->container, json_encode([]), 'sync', 'sync'));",
        "116": "}",
        "117": null,
        "118": "if ($handler || $handler = $this->getCommandHandler($command)) {",
        "119": "$callback = function ($command) use ($handler) {",
        "120": "$method = method_exists($handler, 'handle') ? 'handle' : '__invoke';",
        "121": null,
        "122": "return $handler->{$method}($command);",
        "123": "};",
        "124": "} else {",
        "125": "$callback = function ($command) {",
        "126": "$method = method_exists($command, 'handle') ? 'handle' : '__invoke';",
        "127": null,
        "128": "return $this->container->call([$command, $method]);",
        "129": "};",
        "130": "}",
        "131": null,
        "132": "return $this->pipeline->send($command)->through($this->pipes)->then($callback);",
        "133": "}",
        "134": null,
        "135": "\/**",
        "136": "* Attempt to find the batch with the given ID.",
        "137": "*",
        "138": "* @param  string  $batchId",
        "139": "* @return \\Illuminate\\Bus\\Batch|null",
        "140": "*\/",
        "141": "public function findBatch(string $batchId)",
        "142": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 141,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null,
        "131": "\/**",
        "132": "* Get the final piece of the Closure onion.",
        "133": "*",
        "134": "* @param  \\Closure  $destination",
        "135": "* @return \\Closure",
        "136": "*\/",
        "137": "protected function prepareDestination(Closure $destination)",
        "138": "{",
        "139": "return function ($passable) use ($destination) {",
        "140": "try {",
        "141": "return $destination($passable);",
        "142": "} catch (Throwable $e) {",
        "143": "return $this->handleException($passable, $e);",
        "144": "}",
        "145": "};",
        "146": "}",
        "147": null,
        "148": "\/**",
        "149": "* Get a Closure that represents a slice of the application onion.",
        "150": "*",
        "151": "* @return \\Closure",
        "152": "*\/",
        "153": "protected function carry()",
        "154": "{",
        "155": "return function ($stack, $pipe) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 116,
      "method": "then",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "101": "return $this;",
        "102": "}",
        "103": null,
        "104": "\/**",
        "105": "* Run the pipeline with a final destination callback.",
        "106": "*",
        "107": "* @param  \\Closure  $destination",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "public function then(Closure $destination)",
        "111": "{",
        "112": "$pipeline = array_reduce(",
        "113": "array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
        "114": ");",
        "115": null,
        "116": "return $pipeline($this->passable);",
        "117": "}",
        "118": null,
        "119": "\/**",
        "120": "* Run the pipeline and return the result.",
        "121": "*",
        "122": "* @return mixed",
        "123": "*\/",
        "124": "public function thenReturn()",
        "125": "{",
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 132,
      "method": "dispatchNow",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "117": null,
        "118": "if ($handler || $handler = $this->getCommandHandler($command)) {",
        "119": "$callback = function ($command) use ($handler) {",
        "120": "$method = method_exists($handler, 'handle') ? 'handle' : '__invoke';",
        "121": null,
        "122": "return $handler->{$method}($command);",
        "123": "};",
        "124": "} else {",
        "125": "$callback = function ($command) {",
        "126": "$method = method_exists($command, 'handle') ? 'handle' : '__invoke';",
        "127": null,
        "128": "return $this->container->call([$command, $method]);",
        "129": "};",
        "130": "}",
        "131": null,
        "132": "return $this->pipeline->send($command)->through($this->pipes)->then($callback);",
        "133": "}",
        "134": null,
        "135": "\/**",
        "136": "* Attempt to find the batch with the given ID.",
        "137": "*",
        "138": "* @param  string  $batchId",
        "139": "* @return \\Illuminate\\Bus\\Batch|null",
        "140": "*\/",
        "141": "public function findBatch(string $batchId)",
        "142": "{",
        "143": "return $this->container->make(BatchRepository::class)->find($batchId);",
        "144": "}",
        "145": null,
        "146": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php",
      "line_number": 123,
      "method": "Illuminate\\Queue\\{closure}",
      "class": "Illuminate\\Queue\\CallQueuedHandler",
      "code_snippet": {
        "108": "*",
        "109": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "110": "* @param  mixed  $command",
        "111": "* @return mixed",
        "112": "*\/",
        "113": "protected function dispatchThroughMiddleware(Job $job, $command)",
        "114": "{",
        "115": "if ($command instanceof \\__PHP_Incomplete_Class) {",
        "116": "throw new \\Exception('Job is incomplete class: '.json_encode($command));",
        "117": "}",
        "118": null,
        "119": "return (new Pipeline($this->container))->send($command)",
        "120": "->through(array_merge(method_exists($command, 'middleware') ? $command->middleware() : [], $command->middleware ?? []))",
        "121": "->then(function ($command) use ($job) {",
        "122": "return $this->dispatcher->dispatchNow(",
        "123": "$command, $this->resolveHandler($job, $command)",
        "124": ");",
        "125": "});",
        "126": "}",
        "127": null,
        "128": "\/**",
        "129": "* Resolve the handler for the given command.",
        "130": "*",
        "131": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "132": "* @param  mixed  $command",
        "133": "* @return mixed",
        "134": "*\/",
        "135": "protected function resolveHandler($job, $command)",
        "136": "{",
        "137": "$handler = $this->dispatcher->getCommandHandler($command) ?: null;"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 141,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null,
        "131": "\/**",
        "132": "* Get the final piece of the Closure onion.",
        "133": "*",
        "134": "* @param  \\Closure  $destination",
        "135": "* @return \\Closure",
        "136": "*\/",
        "137": "protected function prepareDestination(Closure $destination)",
        "138": "{",
        "139": "return function ($passable) use ($destination) {",
        "140": "try {",
        "141": "return $destination($passable);",
        "142": "} catch (Throwable $e) {",
        "143": "return $this->handleException($passable, $e);",
        "144": "}",
        "145": "};",
        "146": "}",
        "147": null,
        "148": "\/**",
        "149": "* Get a Closure that represents a slice of the application onion.",
        "150": "*",
        "151": "* @return \\Closure",
        "152": "*\/",
        "153": "protected function carry()",
        "154": "{",
        "155": "return function ($stack, $pipe) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 116,
      "method": "then",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "101": "return $this;",
        "102": "}",
        "103": null,
        "104": "\/**",
        "105": "* Run the pipeline with a final destination callback.",
        "106": "*",
        "107": "* @param  \\Closure  $destination",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "public function then(Closure $destination)",
        "111": "{",
        "112": "$pipeline = array_reduce(",
        "113": "array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
        "114": ");",
        "115": null,
        "116": "return $pipeline($this->passable);",
        "117": "}",
        "118": null,
        "119": "\/**",
        "120": "* Run the pipeline and return the result.",
        "121": "*",
        "122": "* @return mixed",
        "123": "*\/",
        "124": "public function thenReturn()",
        "125": "{",
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php",
      "line_number": 125,
      "method": "dispatchThroughMiddleware",
      "class": "Illuminate\\Queue\\CallQueuedHandler",
      "code_snippet": {
        "110": "* @param  mixed  $command",
        "111": "* @return mixed",
        "112": "*\/",
        "113": "protected function dispatchThroughMiddleware(Job $job, $command)",
        "114": "{",
        "115": "if ($command instanceof \\__PHP_Incomplete_Class) {",
        "116": "throw new \\Exception('Job is incomplete class: '.json_encode($command));",
        "117": "}",
        "118": null,
        "119": "return (new Pipeline($this->container))->send($command)",
        "120": "->through(array_merge(method_exists($command, 'middleware') ? $command->middleware() : [], $command->middleware ?? []))",
        "121": "->then(function ($command) use ($job) {",
        "122": "return $this->dispatcher->dispatchNow(",
        "123": "$command, $this->resolveHandler($job, $command)",
        "124": ");",
        "125": "});",
        "126": "}",
        "127": null,
        "128": "\/**",
        "129": "* Resolve the handler for the given command.",
        "130": "*",
        "131": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "132": "* @param  mixed  $command",
        "133": "* @return mixed",
        "134": "*\/",
        "135": "protected function resolveHandler($job, $command)",
        "136": "{",
        "137": "$handler = $this->dispatcher->getCommandHandler($command) ?: null;",
        "138": null,
        "139": "if ($handler) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php",
      "line_number": 69,
      "method": "call",
      "class": "Illuminate\\Queue\\CallQueuedHandler",
      "code_snippet": {
        "54": "*\/",
        "55": "public function call(Job $job, array $data)",
        "56": "{",
        "57": "try {",
        "58": "$command = $this->setJobInstanceIfNecessary(",
        "59": "$job, $this->getCommand($data)",
        "60": ");",
        "61": "} catch (ModelNotFoundException $e) {",
        "62": "return $this->handleModelNotFound($job, $e);",
        "63": "}",
        "64": null,
        "65": "if ($command instanceof ShouldBeUniqueUntilProcessing) {",
        "66": "$this->ensureUniqueJobLockIsReleased($command);",
        "67": "}",
        "68": null,
        "69": "$this->dispatchThroughMiddleware($job, $command);",
        "70": null,
        "71": "if (! $job->isReleased() && ! $command instanceof ShouldBeUniqueUntilProcessing) {",
        "72": "$this->ensureUniqueJobLockIsReleased($command);",
        "73": "}",
        "74": null,
        "75": "if (! $job->hasFailed() && ! $job->isReleased()) {",
        "76": "$this->ensureNextJobInChainIsDispatched($command);",
        "77": "$this->ensureSuccessfulBatchJobIsRecorded($command);",
        "78": "}",
        "79": null,
        "80": "if (! $job->isDeletedOrReleased()) {",
        "81": "$job->delete();",
        "82": "}",
        "83": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Jobs\/Job.php",
      "line_number": 98,
      "method": "fire",
      "class": "Illuminate\\Queue\\Jobs\\Job",
      "code_snippet": {
        "83": "{",
        "84": "return $this->payload()['uuid'] ?? null;",
        "85": "}",
        "86": null,
        "87": "\/**",
        "88": "* Fire the job.",
        "89": "*",
        "90": "* @return void",
        "91": "*\/",
        "92": "public function fire()",
        "93": "{",
        "94": "$payload = $this->payload();",
        "95": null,
        "96": "[$class, $method] = JobName::parse($payload['job']);",
        "97": null,
        "98": "($this->instance = $this->resolve($class))->{$method}($this, $payload['data']);",
        "99": "}",
        "100": null,
        "101": "\/**",
        "102": "* Delete the job from the queue.",
        "103": "*",
        "104": "* @return void",
        "105": "*\/",
        "106": "public function delete()",
        "107": "{",
        "108": "$this->deleted = true;",
        "109": "}",
        "110": null,
        "111": "\/**",
        "112": "* Determine if the job has been deleted."
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Worker.php",
      "line_number": 428,
      "method": "process",
      "class": "Illuminate\\Queue\\Worker",
      "code_snippet": {
        "413": "\/\/ over its maximum attempt limits, which could primarily happen when this job is",
        "414": "\/\/ continually timing out and not actually throwing any exceptions from itself.",
        "415": "$this->raiseBeforeJobEvent($connectionName, $job);",
        "416": null,
        "417": "$this->markJobAsFailedIfAlreadyExceedsMaxAttempts(",
        "418": "$connectionName, $job, (int) $options->maxTries",
        "419": ");",
        "420": null,
        "421": "if ($job->isDeleted()) {",
        "422": "return $this->raiseAfterJobEvent($connectionName, $job);",
        "423": "}",
        "424": null,
        "425": "\/\/ Here we will fire off the job and let it process. We will catch any exceptions, so",
        "426": "\/\/ they can be reported to the developer's logs, etc. Once the job is finished the",
        "427": "\/\/ proper events will be fired to let any listeners know this job has completed.",
        "428": "$job->fire();",
        "429": null,
        "430": "$this->raiseAfterJobEvent($connectionName, $job);",
        "431": "} catch (Throwable $e) {",
        "432": "$this->handleJobException($connectionName, $job, $options, $e);",
        "433": "}",
        "434": "}",
        "435": null,
        "436": "\/**",
        "437": "* Handle an exception that occurred while the job was running.",
        "438": "*",
        "439": "* @param  string  $connectionName",
        "440": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "441": "* @param  \\Illuminate\\Queue\\WorkerOptions  $options",
        "442": "* @param  \\Throwable  $e"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Worker.php",
      "line_number": 378,
      "method": "runJob",
      "class": "Illuminate\\Queue\\Worker",
      "code_snippet": {
        "363": "$this->sleep(1);",
        "364": "}",
        "365": "}",
        "366": null,
        "367": "\/**",
        "368": "* Process the given job.",
        "369": "*",
        "370": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "371": "* @param  string  $connectionName",
        "372": "* @param  \\Illuminate\\Queue\\WorkerOptions  $options",
        "373": "* @return void",
        "374": "*\/",
        "375": "protected function runJob($job, $connectionName, WorkerOptions $options)",
        "376": "{",
        "377": "try {",
        "378": "return $this->process($connectionName, $job, $options);",
        "379": "} catch (Throwable $e) {",
        "380": "$this->exceptions->report($e);",
        "381": null,
        "382": "$this->stopWorkerIfLostConnection($e);",
        "383": "}",
        "384": "}",
        "385": null,
        "386": "\/**",
        "387": "* Stop the worker if we have lost connection to a database.",
        "388": "*",
        "389": "* @param  \\Throwable  $e",
        "390": "* @return void",
        "391": "*\/",
        "392": "protected function stopWorkerIfLostConnection($e)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Worker.php",
      "line_number": 172,
      "method": "daemon",
      "class": "Illuminate\\Queue\\Worker",
      "code_snippet": {
        "157": "\/\/ not stuck in a frozen state forever. Then, we can fire off this job.",
        "158": "$job = $this->getNextJob(",
        "159": "$this->manager->connection($connectionName), $queue",
        "160": ");",
        "161": null,
        "162": "if ($supportsAsyncSignals) {",
        "163": "$this->registerTimeoutHandler($job, $options);",
        "164": "}",
        "165": null,
        "166": "\/\/ If the daemon should run (not in maintenance mode, etc.), then we can run",
        "167": "\/\/ fire off this job for processing. Otherwise, we will need to sleep the",
        "168": "\/\/ worker so no more jobs are processed until they should be processed.",
        "169": "if ($job) {",
        "170": "$jobsProcessed++;",
        "171": null,
        "172": "$this->runJob($job, $connectionName, $options);",
        "173": null,
        "174": "if ($options->rest > 0) {",
        "175": "$this->sleep($options->rest);",
        "176": "}",
        "177": "} else {",
        "178": "$this->sleep($options->sleep);",
        "179": "}",
        "180": null,
        "181": "if ($supportsAsyncSignals) {",
        "182": "$this->resetTimeoutHandler();",
        "183": "}",
        "184": null,
        "185": "\/\/ Finally, we will check to see if we have exceeded our memory limits or if",
        "186": "\/\/ the queue should restart based on other indications. If so, we'll stop"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Console\/WorkCommand.php",
      "line_number": 130,
      "method": "runWorker",
      "class": "Illuminate\\Queue\\Console\\WorkCommand",
      "code_snippet": {
        "115": ");",
        "116": "}",
        "117": null,
        "118": "\/**",
        "119": "* Run the worker instance.",
        "120": "*",
        "121": "* @param  string  $connection",
        "122": "* @param  string  $queue",
        "123": "* @return int|null",
        "124": "*\/",
        "125": "protected function runWorker($connection, $queue)",
        "126": "{",
        "127": "return $this->worker->setName($this->option('name'))",
        "128": "->setCache($this->cache)",
        "129": "->{$this->option('once') ? 'runNextJob' : 'daemon'}(",
        "130": "$connection, $queue, $this->gatherWorkerOptions()",
        "131": ");",
        "132": "}",
        "133": null,
        "134": "\/**",
        "135": "* Gather all of the queue worker options as a single object.",
        "136": "*",
        "137": "* @return \\Illuminate\\Queue\\WorkerOptions",
        "138": "*\/",
        "139": "protected function gatherWorkerOptions()",
        "140": "{",
        "141": "return new WorkerOptions(",
        "142": "$this->option('name'),",
        "143": "max($this->option('backoff'), $this->option('delay')),",
        "144": "$this->option('memory'),"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Console\/WorkCommand.php",
      "line_number": 114,
      "method": "handle",
      "class": "Illuminate\\Queue\\Console\\WorkCommand",
      "code_snippet": {
        "99": null,
        "100": "\/\/ We'll listen to the processed and failed events so we can write information",
        "101": "\/\/ to the console as jobs are processed, which will let the developer watch",
        "102": "\/\/ which jobs are coming through a queue and be informed on its progress.",
        "103": "$this->listenForEvents();",
        "104": null,
        "105": "$connection = $this->argument('connection')",
        "106": "?: $this->laravel['config']['queue.default'];",
        "107": null,
        "108": "\/\/ We need to get the right queue for the connection which is set in the queue",
        "109": "\/\/ configuration file for the application. We will pull it based on the set",
        "110": "\/\/ connection being run for the queue operation currently being executed.",
        "111": "$queue = $this->getQueue($connection);",
        "112": null,
        "113": "return $this->runWorker(",
        "114": "$connection, $queue",
        "115": ");",
        "116": "}",
        "117": null,
        "118": "\/**",
        "119": "* Run the worker instance.",
        "120": "*",
        "121": "* @param  string  $connection",
        "122": "* @param  string  $queue",
        "123": "* @return int|null",
        "124": "*\/",
        "125": "protected function runWorker($connection, $queue)",
        "126": "{",
        "127": "return $this->worker->setName($this->option('name'))",
        "128": "->setCache($this->cache)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 36,
      "method": "Illuminate\\Container\\{closure}",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "21": "*",
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Util.php",
      "line_number": 41,
      "method": "unwrapIfClosure",
      "class": "Illuminate\\Container\\Util",
      "code_snippet": {
        "26": null,
        "27": "return is_array($value) ? $value : [$value];",
        "28": "}",
        "29": null,
        "30": "\/**",
        "31": "* Return the default value of the given value.",
        "32": "*",
        "33": "* From global value() helper in Illuminate\\Support.",
        "34": "*",
        "35": "* @param  mixed  $value",
        "36": "* @param  mixed  ...$args",
        "37": "* @return mixed",
        "38": "*\/",
        "39": "public static function unwrapIfClosure($value, ...$args)",
        "40": "{",
        "41": "return $value instanceof Closure ? $value(...$args) : $value;",
        "42": "}",
        "43": null,
        "44": "\/**",
        "45": "* Get the class name of the given parameter's type, if possible.",
        "46": "*",
        "47": "* From Reflector::getParameterClassName() in Illuminate\\Support.",
        "48": "*",
        "49": "* @param  \\ReflectionParameter  $parameter",
        "50": "* @return string|null",
        "51": "*\/",
        "52": "public static function getParameterClassName($parameter)",
        "53": "{",
        "54": "$type = $parameter->getType();",
        "55": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 93,
      "method": "callBoundMethod",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "78": "protected static function callBoundMethod($container, $callback, $default)",
        "79": "{",
        "80": "if (! is_array($callback)) {",
        "81": "return Util::unwrapIfClosure($default);",
        "82": "}",
        "83": null,
        "84": "\/\/ Here we need to turn the array callable into a Class@method string we can use to",
        "85": "\/\/ examine the container and see if there are any method bindings for this given",
        "86": "\/\/ method. If there are, we can call this method binding callback immediately.",
        "87": "$method = static::normalizeMethod($callback);",
        "88": null,
        "89": "if ($container->hasMethodBinding($method)) {",
        "90": "return $container->callMethodBinding($method, $callback[0]);",
        "91": "}",
        "92": null,
        "93": "return Util::unwrapIfClosure($default);",
        "94": "}",
        "95": null,
        "96": "\/**",
        "97": "* Normalize the given callback into a Class@method string.",
        "98": "*",
        "99": "* @param  callable  $callback",
        "100": "* @return string",
        "101": "*\/",
        "102": "protected static function normalizeMethod($callback)",
        "103": "{",
        "104": "$class = is_string($callback[0]) ? $callback[0] : get_class($callback[0]);",
        "105": null,
        "106": "return \"{$class}@{$callback[1]}\";",
        "107": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 37,
      "method": "call",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/",
        "51": "protected static function callClass($container, $target, array $parameters = [], $defaultMethod = null)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Container.php",
      "line_number": 651,
      "method": "call",
      "class": "Illuminate\\Container\\Container",
      "code_snippet": {
        "636": "};",
        "637": "}",
        "638": null,
        "639": "\/**",
        "640": "* Call the given Closure \/ class@method and inject its dependencies.",
        "641": "*",
        "642": "* @param  callable|string  $callback",
        "643": "* @param  array<string, mixed>  $parameters",
        "644": "* @param  string|null  $defaultMethod",
        "645": "* @return mixed",
        "646": "*",
        "647": "* @throws \\InvalidArgumentException",
        "648": "*\/",
        "649": "public function call($callback, array $parameters = [], $defaultMethod = null)",
        "650": "{",
        "651": "return BoundMethod::call($this, $callback, $parameters, $defaultMethod);",
        "652": "}",
        "653": null,
        "654": "\/**",
        "655": "* Get a closure to resolve the given type from the container.",
        "656": "*",
        "657": "* @param  string  $abstract",
        "658": "* @return \\Closure",
        "659": "*\/",
        "660": "public function factory($abstract)",
        "661": "{",
        "662": "return function () use ($abstract) {",
        "663": "return $this->make($abstract);",
        "664": "};",
        "665": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Command.php",
      "line_number": 136,
      "method": "execute",
      "class": "Illuminate\\Console\\Command",
      "code_snippet": {
        "121": "$this->input = $input, $this->output",
        "122": ");",
        "123": "}",
        "124": null,
        "125": "\/**",
        "126": "* Execute the console command.",
        "127": "*",
        "128": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "129": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output",
        "130": "* @return int",
        "131": "*\/",
        "132": "protected function execute(InputInterface $input, OutputInterface $output)",
        "133": "{",
        "134": "$method = method_exists($this, 'handle') ? 'handle' : '__invoke';",
        "135": null,
        "136": "return (int) $this->laravel->call([$this, $method]);",
        "137": "}",
        "138": null,
        "139": "\/**",
        "140": "* Resolve the console command instance for the given command.",
        "141": "*",
        "142": "* @param  \\Symfony\\Component\\Console\\Command\\Command|string  $command",
        "143": "* @return \\Symfony\\Component\\Console\\Command\\Command",
        "144": "*\/",
        "145": "protected function resolveCommand($command)",
        "146": "{",
        "147": "if (! class_exists($command)) {",
        "148": "return $this->getApplication()->find($command);",
        "149": "}",
        "150": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Command\/Command.php",
      "line_number": 308,
      "method": "run",
      "class": "Symfony\\Component\\Console\\Command\\Command",
      "code_snippet": {
        "293": "$this->interact($input, $output);",
        "294": "}",
        "295": null,
        "296": "\/\/ The command name argument is often omitted when a command is executed directly with its run() method.",
        "297": "\/\/ It would fail the validation if we didn't make sure the command argument is present,",
        "298": "\/\/ since it's required by the application.",
        "299": "if ($input->hasArgument('command') && null === $input->getArgument('command')) {",
        "300": "$input->setArgument('command', $this->getName());",
        "301": "}",
        "302": null,
        "303": "$input->validate();",
        "304": null,
        "305": "if ($this->code) {",
        "306": "$statusCode = ($this->code)($input, $output);",
        "307": "} else {",
        "308": "$statusCode = $this->execute($input, $output);",
        "309": null,
        "310": "if (!\\is_int($statusCode)) {",
        "311": "throw new \\TypeError(sprintf('Return value of \"%s::execute()\" must be of the type int, \"%s\" returned.', static::class, get_debug_type($statusCode)));",
        "312": "}",
        "313": "}",
        "314": null,
        "315": "return is_numeric($statusCode) ? (int) $statusCode : 0;",
        "316": "}",
        "317": null,
        "318": "\/**",
        "319": "* Adds suggestions to $suggestions for the current completion input (e.g. option or argument).",
        "320": "*\/",
        "321": "public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void",
        "322": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Command.php",
      "line_number": 121,
      "method": "run",
      "class": "Illuminate\\Console\\Command",
      "code_snippet": {
        "106": null,
        "107": "\/**",
        "108": "* Run the console command.",
        "109": "*",
        "110": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "111": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output",
        "112": "* @return int",
        "113": "*\/",
        "114": "public function run(InputInterface $input, OutputInterface $output): int",
        "115": "{",
        "116": "$this->output = $this->laravel->make(",
        "117": "OutputStyle::class, ['input' => $input, 'output' => $output]",
        "118": ");",
        "119": null,
        "120": "return parent::run(",
        "121": "$this->input = $input, $this->output",
        "122": ");",
        "123": "}",
        "124": null,
        "125": "\/**",
        "126": "* Execute the console command.",
        "127": "*",
        "128": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "129": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface  $output",
        "130": "* @return int",
        "131": "*\/",
        "132": "protected function execute(InputInterface $input, OutputInterface $output)",
        "133": "{",
        "134": "$method = method_exists($this, 'handle') ? 'handle' : '__invoke';",
        "135": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php",
      "line_number": 998,
      "method": "doRunCommand",
      "class": "Symfony\\Component\\Console\\Application",
      "code_snippet": {
        "983": "if (!$hasNext) {",
        "984": "if (!\\in_array($signal, [\\SIGUSR1, \\SIGUSR2], true)) {",
        "985": "exit(0);",
        "986": "}",
        "987": "}",
        "988": "});",
        "989": "}",
        "990": "}",
        "991": null,
        "992": "foreach ($command->getSubscribedSignals() as $signal) {",
        "993": "$this->signalRegistry->register($signal, [$command, 'handleSignal']);",
        "994": "}",
        "995": "}",
        "996": null,
        "997": "if (null === $this->dispatcher) {",
        "998": "return $command->run($input, $output);",
        "999": "}",
        "1000": null,
        "1001": "\/\/ bind before the console.command event, so the listeners have access to input options\/arguments",
        "1002": "try {",
        "1003": "$command->mergeApplicationDefinition();",
        "1004": "$input->bind($command->getDefinition());",
        "1005": "} catch (ExceptionInterface) {",
        "1006": "\/\/ ignore invalid options\/arguments for now, to allow the event listeners to customize the InputDefinition",
        "1007": "}",
        "1008": null,
        "1009": "$event = new ConsoleCommandEvent($command, $input, $output);",
        "1010": "$e = null;",
        "1011": null,
        "1012": "try {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php",
      "line_number": 299,
      "method": "doRun",
      "class": "Symfony\\Component\\Console\\Application",
      "code_snippet": {
        "284": null,
        "285": "return $event->getExitCode();",
        "286": "}",
        "287": null,
        "288": "return 1;",
        "289": "}",
        "290": null,
        "291": "$command = $this->find($alternative);",
        "292": "}",
        "293": null,
        "294": "if ($command instanceof LazyCommand) {",
        "295": "$command = $command->getCommand();",
        "296": "}",
        "297": null,
        "298": "$this->runningCommand = $command;",
        "299": "$exitCode = $this->doRunCommand($command, $input, $output);",
        "300": "$this->runningCommand = null;",
        "301": null,
        "302": "return $exitCode;",
        "303": "}",
        "304": null,
        "305": "\/**",
        "306": "* {@inheritdoc}",
        "307": "*\/",
        "308": "public function reset()",
        "309": "{",
        "310": "}",
        "311": null,
        "312": "public function setHelperSet(HelperSet $helperSet)",
        "313": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php",
      "line_number": 171,
      "method": "run",
      "class": "Symfony\\Component\\Console\\Application",
      "code_snippet": {
        "156": "$this->renderThrowable($e, $output);",
        "157": "}",
        "158": "};",
        "159": "if ($phpHandler = set_exception_handler($renderException)) {",
        "160": "restore_exception_handler();",
        "161": "if (!\\is_array($phpHandler) || !$phpHandler[0] instanceof ErrorHandler) {",
        "162": "$errorHandler = true;",
        "163": "} elseif ($errorHandler = $phpHandler[0]->setExceptionHandler($renderException)) {",
        "164": "$phpHandler[0]->setExceptionHandler($errorHandler);",
        "165": "}",
        "166": "}",
        "167": null,
        "168": "$this->configureIO($input, $output);",
        "169": null,
        "170": "try {",
        "171": "$exitCode = $this->doRun($input, $output);",
        "172": "} catch (\\Exception $e) {",
        "173": "if (!$this->catchExceptions) {",
        "174": "throw $e;",
        "175": "}",
        "176": null,
        "177": "$renderException($e);",
        "178": null,
        "179": "$exitCode = $e->getCode();",
        "180": "if (is_numeric($exitCode)) {",
        "181": "$exitCode = (int) $exitCode;",
        "182": "if ($exitCode <= 0) {",
        "183": "$exitCode = 1;",
        "184": "}",
        "185": "} else {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Application.php",
      "line_number": 102,
      "method": "run",
      "class": "Illuminate\\Console\\Application",
      "code_snippet": {
        "87": "*",
        "88": "* @return int",
        "89": "*\/",
        "90": "public function run(InputInterface $input = null, OutputInterface $output = null): int",
        "91": "{",
        "92": "$commandName = $this->getCommandName(",
        "93": "$input = $input ?: new ArgvInput",
        "94": ");",
        "95": null,
        "96": "$this->events->dispatch(",
        "97": "new CommandStarting(",
        "98": "$commandName, $input, $output = $output ?: new BufferedConsoleOutput",
        "99": ")",
        "100": ");",
        "101": null,
        "102": "$exitCode = parent::run($input, $output);",
        "103": null,
        "104": "$this->events->dispatch(",
        "105": "new CommandFinished($commandName, $input, $output, $exitCode)",
        "106": ");",
        "107": null,
        "108": "return $exitCode;",
        "109": "}",
        "110": null,
        "111": "\/**",
        "112": "* Determine the proper PHP executable.",
        "113": "*",
        "114": "* @return string",
        "115": "*\/",
        "116": "public static function phpBinary()"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Console\/Kernel.php",
      "line_number": 129,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Console\\Kernel",
      "code_snippet": {
        "114": "return $this->app['config']->get('cache.schedule_store', Env::get('SCHEDULE_CACHE_DRIVER'));",
        "115": "}",
        "116": null,
        "117": "\/**",
        "118": "* Run the console application.",
        "119": "*",
        "120": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "121": "* @param  \\Symfony\\Component\\Console\\Output\\OutputInterface|null  $output",
        "122": "* @return int",
        "123": "*\/",
        "124": "public function handle($input, $output = null)",
        "125": "{",
        "126": "try {",
        "127": "$this->bootstrap();",
        "128": null,
        "129": "return $this->getArtisan()->run($input, $output);",
        "130": "} catch (Throwable $e) {",
        "131": "$this->reportException($e);",
        "132": null,
        "133": "$this->renderException($output, $e);",
        "134": null,
        "135": "return 1;",
        "136": "}",
        "137": "}",
        "138": null,
        "139": "\/**",
        "140": "* Terminate the application.",
        "141": "*",
        "142": "* @param  \\Symfony\\Component\\Console\\Input\\InputInterface  $input",
        "143": "* @param  int  $status"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/artisan",
      "line_number": 37,
      "method": "[top]",
      "class": null,
      "code_snippet": {
        "22": "\/*",
        "23": "|--------------------------------------------------------------------------",
        "24": "| Run The Artisan Application",
        "25": "|--------------------------------------------------------------------------",
        "26": "|",
        "27": "| When we run the console application, the current CLI command will be",
        "28": "| executed in this console and the response sent back to a terminal",
        "29": "| or another output device for the developers. Here goes nothing!",
        "30": "|",
        "31": "*\/",
        "32": null,
        "33": "$kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);",
        "34": null,
        "35": "$status = $kernel->handle(",
        "36": "$input = new Symfony\\Component\\Console\\Input\\ArgvInput,",
        "37": "new Symfony\\Component\\Console\\Output\\ConsoleOutput",
        "38": ");",
        "39": null,
        "40": "\/*",
        "41": "|--------------------------------------------------------------------------",
        "42": "| Shutdown The Application",
        "43": "|--------------------------------------------------------------------------",
        "44": "|",
        "45": "| Once Artisan has finished running, we will fire off the shutdown events",
        "46": "| so that any final work may be done by the application before we shut",
        "47": "| down the process. This is the last thing to happen to the request.",
        "48": "|",
        "49": "*\/",
        "50": null,
        "51": "$kernel->terminate($input, $status);"
      },
      "application_frame": false
    }
  ],
  "context": {
    "arguments": [
      "artisan",
      "queue:work"
    ],
    "env": {
      "php_version": "8.1.3",
      "laravel_version": "9.17.0",
      "laravel_locale": "en",
      "laravel_config_cached": false,
      "app_debug": true,
      "app_env": "local"
    },
    "request": {
      "ip": null
    },
    "git": {
      "hash": "f5e6fe9c9cc8bebfd2743c7d285aeb22bee637bf",
      "message": "Xdebug support for Artisan console",
      "tag": null,
      "remote": "git@github.com:Wulfheart\/open-flare.git",
      "isDirty": true
    },
    "dumps": [],
    "logs": [],
    "queries": [
      {
        "sql": "select * from `jobs` where `id` = ? limit 1 for update",
        "time": 0.3,
        "connection_name": "mysql",
        "bindings": [
          7
        ],
        "microtime": 1655764223.816295
      },
      {
        "sql": "delete from `jobs` where `id` = ?",
        "time": 0.25,
        "connection_name": "mysql",
        "bindings": [
          7
        ],
        "microtime": 1655764223.816711
      },
      {
        "sql": "insert into `failed_jobs` (`uuid`, `connection`, `queue`, `payload`, `exception`, `failed_at`) values (?, ?, ?, ?, ?, ?)",
        "time": 2.92,
        "connection_name": "mysql",
        "bindings": [
          "04f67067-b134-4906-a510-4d1973071194",
          "database",
          "default",
          "{\"uuid\":\"04f67067-b134-4906-a510-4d1973071194\",\"displayName\":\"App\\\\Jobs\\\\TestJob\",\"job\":\"Illuminate\\\\Queue\\\\CallQueuedHandler@call\",\"maxTries\":null,\"maxExceptions\":null,\"failOnTimeout\":false,\"backoff\":null,\"timeout\":null,\"retryUntil\":null,\"data\":{\"commandName\":\"App\\\\Jobs\\\\TestJob\",\"command\":\"O:16:\\\"App\\\\Jobs\\\\TestJob\\\":0:{}\"}}",
          "Exception: JobException in \/home\/alex\/Code\/open-flare\/app\/Jobs\/TestJob.php:33\nStack trace:\n#0 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php(36): App\\Jobs\\TestJob->handle()\n#1 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Util.php(41): Illuminate\\Container\\BoundMethod::Illuminate\\Container\\{closure}()\n#2 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php(93): Illuminate\\Container\\Util::unwrapIfClosure()\n#3 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php(37): Illuminate\\Container\\BoundMethod::callBoundMethod()\n#4 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Container.php(651): Illuminate\\Container\\BoundMethod::call()\n#5 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php(128): Illuminate\\Container\\Container->call()\n#6 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php(141): Illuminate\\Bus\\Dispatcher->Illuminate\\Bus\\{closure}()\n#7 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php(116): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}()\n#8 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php(132): Illuminate\\Pipeline\\Pipeline->then()\n#9 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php(123): Illuminate\\Bus\\Dispatcher->dispatchNow()\n#10 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php(141): Illuminate\\Queue\\CallQueuedHandler->Illuminate\\Queue\\{closure}()\n#11 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php(116): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}()\n#12 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php(125): Illuminate\\Pipeline\\Pipeline->then()\n#13 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php(69): Illuminate\\Queue\\CallQueuedHandler->dispatchThroughMiddleware()\n#14 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Jobs\/Job.php(98): Illuminate\\Queue\\CallQueuedHandler->call()\n#15 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Worker.php(428): Illuminate\\Queue\\Jobs\\Job->fire()\n#16 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Worker.php(378): Illuminate\\Queue\\Worker->process()\n#17 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Worker.php(172): Illuminate\\Queue\\Worker->runJob()\n#18 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Console\/WorkCommand.php(130): Illuminate\\Queue\\Worker->daemon()\n#19 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Console\/WorkCommand.php(114): Illuminate\\Queue\\Console\\WorkCommand->runWorker()\n#20 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php(36): Illuminate\\Queue\\Console\\WorkCommand->handle()\n#21 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Util.php(41): Illuminate\\Container\\BoundMethod::Illuminate\\Container\\{closure}()\n#22 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php(93): Illuminate\\Container\\Util::unwrapIfClosure()\n#23 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php(37): Illuminate\\Container\\BoundMethod::callBoundMethod()\n#24 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Container.php(651): Illuminate\\Container\\BoundMethod::call()\n#25 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Command.php(136): Illuminate\\Container\\Container->call()\n#26 \/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Command\/Command.php(308): Illuminate\\Console\\Command->execute()\n#27 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Command.php(121): Symfony\\Component\\Console\\Command\\Command->run()\n#28 \/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php(998): Illuminate\\Console\\Command->run()\n#29 \/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php(299): Symfony\\Component\\Console\\Application->doRunCommand()\n#30 \/home\/alex\/Code\/open-flare\/vendor\/symfony\/console\/Application.php(171): Symfony\\Component\\Console\\Application->doRun()\n#31 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Console\/Application.php(102): Symfony\\Component\\Console\\Application->run()\n#32 \/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Console\/Kernel.php(129): Illuminate\\Console\\Application->run()\n#33 \/home\/alex\/Code\/open-flare\/artisan(37): Illuminate\\Foundation\\Console\\Kernel->handle()\n#34 {main}",
          "2022-06-20T22:30:23.819744Z"
        ],
        "microtime": 1655764223.822899
      }
    ],
    "job": {
      "uuid": "04f67067-b134-4906-a510-4d1973071194",
      "maxTries": null,
      "maxExceptions": null,
      "failOnTimeout": false,
      "backoff": null,
      "timeout": null,
      "retryUntil": null,
      "data": {
        "connection": null,
        "queue": null,
        "chainConnection": null,
        "chainQueue": null,
        "chainCatchCallbacks": null,
        "delay": null,
        "afterCommit": null,
        "middleware": [],
        "chained": []
      },
      "name": "App\\Jobs\\TestJob",
      "connection": "database",
      "queue": "default"
    }
  },
  "stage": "local",
  "message_level": null,
  "open_frame_index": null,
  "application_path": null,
  "application_version": null,
  "tracking_uuid": "63108db1-3894-4a2b-82a3-f2ed41fe9cf2"
}