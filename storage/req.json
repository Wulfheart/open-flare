{"notifier":"Laravel Client","language":"PHP","framework_version":"9.19.0","language_version":"8.1.7","exception_class":"Exception","seen_at":1656626113,"message":"HELP","glows":[],"solutions":[],"documentation_links":[],"stacktrace":[{"file":"\/home\/alex\/Code\/open-flare\/routes\/web.php","line_number":26,"method":"{closure}","class":"Illuminate\\Routing\\RouteFileRegistrar","code_snippet":{"11":"\/*","12":"|--------------------------------------------------------------------------","13":"| Web Routes","14":"|--------------------------------------------------------------------------","15":"|","16":"| Here is where you can register web routes for your application. These","17":"| routes are loaded by the RouteServiceProvider within a group which","18":"| contains the \"web\" middleware group. Now create something great!","19":"|","20":"*\/","21":null,"22":"Route::get('\/', function (Request $request) {","23":"Auth::login(User::factory()->create());","24":"$request->session()->put('test', '123');","25":"Log::debug('Hello test');","26":"throw new Exception('HELP');","27":null,"28":"return view('welcome');","29":"});","30":null,"31":"Route::get('\/data', ExceptionController::class);","32":null,"33":"Route::get('\/job', function () {","34":"dispatch(new TestJob(1));","35":"\/\/ return response();","36":"});","37":null,"38":"Route::get('\/display', function () {","39":null,"40":"return view('welcome', ["},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Route.php","line_number":244,"method":"runCallable","class":"Illuminate\\Routing\\Route","code_snippet":{"229":null,"230":"\/**","231":"* Run the route action and return the response.","232":"*","233":"* @return mixed","234":"*\/","235":"protected function runCallable()","236":"{","237":"$callable = $this->action['uses'];","238":null,"239":"if ($this->isSerializedClosure()) {","240":"$callable = unserialize($this->action['uses'])->getClosure();","241":"}","242":null,"243":"return $callable(...array_values($this->resolveMethodDependencies(","244":"$this->parametersWithoutNulls(), new ReflectionFunction($callable)","245":")));","246":"}","247":null,"248":"\/**","249":"* Determine if the route action is a serialized Closure.","250":"*","251":"* @return bool","252":"*\/","253":"protected function isSerializedClosure()","254":"{","255":"return RouteAction::containsSerializedClosure($this->action);","256":"}","257":null,"258":"\/**"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Route.php","line_number":214,"method":"run","class":"Illuminate\\Routing\\Route","code_snippet":{"199":null,"200":"\/**","201":"* Run the route action and return the response.","202":"*","203":"* @return mixed","204":"*\/","205":"public function run()","206":"{","207":"$this->container = $this->container ?: new Container;","208":null,"209":"try {","210":"if ($this->isControllerAction()) {","211":"return $this->runController();","212":"}","213":null,"214":"return $this->runCallable();","215":"} catch (HttpResponseException $e) {","216":"return $e->getResponse();","217":"}","218":"}","219":null,"220":"\/**","221":"* Checks whether the route's action is a controller.","222":"*","223":"* @return bool","224":"*\/","225":"protected function isControllerAction()","226":"{","227":"return is_string($this->action['uses']) && ! $this->isSerializedClosure();","228":"}"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php","line_number":725,"method":"Illuminate\\Routing\\{closure}","class":"Illuminate\\Routing\\Router","code_snippet":{"710":"* @param  \\Illuminate\\Routing\\Route  $route","711":"* @param  \\Illuminate\\Http\\Request  $request","712":"* @return mixed","713":"*\/","714":"protected function runRouteWithinStack(Route $route, Request $request)","715":"{","716":"$shouldSkipMiddleware = $this->container->bound('middleware.disable') &&","717":"$this->container->make('middleware.disable') === true;","718":null,"719":"$middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);","720":null,"721":"return (new Pipeline($this->container))","722":"->send($request)","723":"->through($middleware)","724":"->then(fn ($request) => $this->prepareResponse(","725":"$request, $route->run()","726":"));","727":"}","728":null,"729":"\/**","730":"* Gather the middleware for the given route with resolved class names.","731":"*","732":"* @param  \\Illuminate\\Routing\\Route  $route","733":"* @return array","734":"*\/","735":"public function gatherRouteMiddleware(Route $route)","736":"{","737":"return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware());","738":"}","739":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":141,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"126":"return $this->then(function ($passable) {","127":"return $passable;","128":"});","129":"}","130":null,"131":"\/**","132":"* Get the final piece of the Closure onion.","133":"*","134":"* @param  \\Closure  $destination","135":"* @return \\Closure","136":"*\/","137":"protected function prepareDestination(Closure $destination)","138":"{","139":"return function ($passable) use ($destination) {","140":"try {","141":"return $destination($passable);","142":"} catch (Throwable $e) {","143":"return $this->handleException($passable, $e);","144":"}","145":"};","146":"}","147":null,"148":"\/**","149":"* Get a Closure that represents a slice of the application onion.","150":"*","151":"* @return \\Closure","152":"*\/","153":"protected function carry()","154":"{","155":"return function ($stack, $pipe) {"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Middleware\/SubstituteBindings.php","line_number":50,"method":"handle","class":"Illuminate\\Routing\\Middleware\\SubstituteBindings","code_snippet":{"24":"public function __construct(Registrar $router)","25":"{","26":"$this->router = $router;","27":"}","28":null,"29":"\/**","30":"* Handle an incoming request.","31":"*","32":"* @param  \\Illuminate\\Http\\Request  $request","33":"* @param  \\Closure  $next","34":"* @return mixed","35":"*\/","36":"public function handle($request, Closure $next)","37":"{","38":"try {","39":"$this->router->substituteBindings($route = $request->route());","40":null,"41":"$this->router->substituteImplicitBindings($route);","42":"} catch (ModelNotFoundException $exception) {","43":"if ($route->getMissing()) {","44":"return $route->getMissing()($request, $exception);","45":"}","46":null,"47":"throw $exception;","48":"}","49":null,"50":"return $next($request);","51":"}","52":"}","53":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/VerifyCsrfToken.php","line_number":78,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken","code_snippet":{"63":"*","64":"* @param  \\Illuminate\\Http\\Request  $request","65":"* @param  \\Closure  $next","66":"* @return mixed","67":"*","68":"* @throws \\Illuminate\\Session\\TokenMismatchException","69":"*\/","70":"public function handle($request, Closure $next)","71":"{","72":"if (","73":"$this->isReading($request) ||","74":"$this->runningUnitTests() ||","75":"$this->inExceptArray($request) ||","76":"$this->tokensMatch($request)","77":") {","78":"return tap($next($request), function ($response) use ($request) {","79":"if ($this->shouldAddXsrfTokenCookie()) {","80":"$this->addCookieToResponse($request, $response);","81":"}","82":"});","83":"}","84":null,"85":"throw new TokenMismatchException('CSRF token mismatch.');","86":"}","87":null,"88":"\/**","89":"* Determine if the HTTP request uses a \u2018read\u2019 verb.","90":"*","91":"* @param  \\Illuminate\\Http\\Request  $request","92":"* @return bool"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/View\/Middleware\/ShareErrorsFromSession.php","line_number":49,"method":"handle","class":"Illuminate\\View\\Middleware\\ShareErrorsFromSession","code_snippet":{"23":"*\/","24":"public function __construct(ViewFactory $view)","25":"{","26":"$this->view = $view;","27":"}","28":null,"29":"\/**","30":"* Handle an incoming request.","31":"*","32":"* @param  \\Illuminate\\Http\\Request  $request","33":"* @param  \\Closure  $next","34":"* @return mixed","35":"*\/","36":"public function handle($request, Closure $next)","37":"{","38":"\/\/ If the current session has an \"errors\" variable bound to it, we will share","39":"\/\/ its value with all view instances so the views can easily access errors","40":"\/\/ without having to bind. An empty bag is set when there aren't errors.","41":"$this->view->share(","42":"'errors', $request->session()->get('errors') ?: new ViewErrorBag","43":");","44":null,"45":"\/\/ Putting the errors in the view for every view allows the developer to just","46":"\/\/ assume that some errors are always available, which is convenient since","47":"\/\/ they don't have to continually run checks for the presence of errors.","48":null,"49":"return $next($request);","50":"}","51":"}","52":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Session\/Middleware\/StartSession.php","line_number":121,"method":"handleStatefulRequest","class":"Illuminate\\Session\\Middleware\\StartSession","code_snippet":{"106":"* @param  \\Illuminate\\Contracts\\Session\\Session  $session","107":"* @param  \\Closure  $next","108":"* @return mixed","109":"*\/","110":"protected function handleStatefulRequest(Request $request, $session, Closure $next)","111":"{","112":"\/\/ If a session driver has been configured, we will need to start the session here","113":"\/\/ so that the data is ready for an application. Note that the Laravel sessions","114":"\/\/ do not make use of PHP \"native\" sessions in any way since they are crappy.","115":"$request->setLaravelSession(","116":"$this->startSession($request, $session)","117":");","118":null,"119":"$this->collectGarbage($session);","120":null,"121":"$response = $next($request);","122":null,"123":"$this->storeCurrentUrl($request, $session);","124":null,"125":"$this->addCookieToResponse($response, $session);","126":null,"127":"\/\/ Again, if the session has been configured we will need to close out the session","128":"\/\/ so that the attributes may be persisted to some storage medium. We will also","129":"\/\/ add the session identifier cookie to the application response headers now.","130":"$this->saveSession($request);","131":null,"132":"return $response;","133":"}","134":null,"135":"\/**"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Session\/Middleware\/StartSession.php","line_number":64,"method":"handle","class":"Illuminate\\Session\\Middleware\\StartSession","code_snippet":{"49":"* @return mixed","50":"*\/","51":"public function handle($request, Closure $next)","52":"{","53":"if (! $this->sessionConfigured()) {","54":"return $next($request);","55":"}","56":null,"57":"$session = $this->getSession($request);","58":null,"59":"if ($this->manager->shouldBlock() ||","60":"($request->route() instanceof Route && $request->route()->locksFor())) {","61":"return $this->handleRequestWhileBlocking($request, $session, $next);","62":"}","63":null,"64":"return $this->handleStatefulRequest($request, $session, $next);","65":"}","66":null,"67":"\/**","68":"* Handle the given request within session state.","69":"*","70":"* @param  \\Illuminate\\Http\\Request  $request","71":"* @param  \\Illuminate\\Contracts\\Session\\Session  $session","72":"* @param  \\Closure  $next","73":"* @return mixed","74":"*\/","75":"protected function handleRequestWhileBlocking(Request $request, $session, Closure $next)","76":"{","77":"if (! $request->route() instanceof Route) {","78":"return;"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Cookie\/Middleware\/AddQueuedCookiesToResponse.php","line_number":37,"method":"handle","class":"Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse","code_snippet":{"17":"\/**","18":"* Create a new CookieQueue instance.","19":"*","20":"* @param  \\Illuminate\\Contracts\\Cookie\\QueueingFactory  $cookies","21":"* @return void","22":"*\/","23":"public function __construct(CookieJar $cookies)","24":"{","25":"$this->cookies = $cookies;","26":"}","27":null,"28":"\/**","29":"* Handle an incoming request.","30":"*","31":"* @param  \\Illuminate\\Http\\Request  $request","32":"* @param  \\Closure  $next","33":"* @return mixed","34":"*\/","35":"public function handle($request, Closure $next)","36":"{","37":"$response = $next($request);","38":null,"39":"foreach ($this->cookies->getQueuedCookies() as $cookie) {","40":"$response->headers->setCookie($cookie);","41":"}","42":null,"43":"return $response;","44":"}","45":"}","46":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Cookie\/Middleware\/EncryptCookies.php","line_number":67,"method":"handle","class":"Illuminate\\Cookie\\Middleware\\EncryptCookies","code_snippet":{"52":"*\/","53":"public function disableFor($name)","54":"{","55":"$this->except = array_merge($this->except, (array) $name);","56":"}","57":null,"58":"\/**","59":"* Handle an incoming request.","60":"*","61":"* @param  \\Illuminate\\Http\\Request  $request","62":"* @param  \\Closure  $next","63":"* @return \\Symfony\\Component\\HttpFoundation\\Response","64":"*\/","65":"public function handle($request, Closure $next)","66":"{","67":"return $this->encrypt($next($this->decrypt($request)));","68":"}","69":null,"70":"\/**","71":"* Decrypt the cookies on the request.","72":"*","73":"* @param  \\Symfony\\Component\\HttpFoundation\\Request  $request","74":"* @return \\Symfony\\Component\\HttpFoundation\\Request","75":"*\/","76":"protected function decrypt(Request $request)","77":"{","78":"foreach ($request->cookies as $key => $cookie) {","79":"if ($this->isDisabled($key)) {","80":"continue;","81":"}"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":116,"method":"then","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"101":"return $this;","102":"}","103":null,"104":"\/**","105":"* Run the pipeline with a final destination callback.","106":"*","107":"* @param  \\Closure  $destination","108":"* @return mixed","109":"*\/","110":"public function then(Closure $destination)","111":"{","112":"$pipeline = array_reduce(","113":"array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)","114":");","115":null,"116":"return $pipeline($this->passable);","117":"}","118":null,"119":"\/**","120":"* Run the pipeline and return the result.","121":"*","122":"* @return mixed","123":"*\/","124":"public function thenReturn()","125":"{","126":"return $this->then(function ($passable) {","127":"return $passable;","128":"});","129":"}","130":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php","line_number":726,"method":"runRouteWithinStack","class":"Illuminate\\Routing\\Router","code_snippet":{"711":"* @param  \\Illuminate\\Http\\Request  $request","712":"* @return mixed","713":"*\/","714":"protected function runRouteWithinStack(Route $route, Request $request)","715":"{","716":"$shouldSkipMiddleware = $this->container->bound('middleware.disable') &&","717":"$this->container->make('middleware.disable') === true;","718":null,"719":"$middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);","720":null,"721":"return (new Pipeline($this->container))","722":"->send($request)","723":"->through($middleware)","724":"->then(fn ($request) => $this->prepareResponse(","725":"$request, $route->run()","726":"));","727":"}","728":null,"729":"\/**","730":"* Gather the middleware for the given route with resolved class names.","731":"*","732":"* @param  \\Illuminate\\Routing\\Route  $route","733":"* @return array","734":"*\/","735":"public function gatherRouteMiddleware(Route $route)","736":"{","737":"return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware());","738":"}","739":null,"740":"\/**"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php","line_number":703,"method":"runRoute","class":"Illuminate\\Routing\\Router","code_snippet":{"688":null,"689":"\/**","690":"* Return the response for the given route.","691":"*","692":"* @param  \\Illuminate\\Http\\Request  $request","693":"* @param  \\Illuminate\\Routing\\Route  $route","694":"* @return \\Symfony\\Component\\HttpFoundation\\Response","695":"*\/","696":"protected function runRoute(Request $request, Route $route)","697":"{","698":"$request->setRouteResolver(fn () => $route);","699":null,"700":"$this->events->dispatch(new RouteMatched($route, $request));","701":null,"702":"return $this->prepareResponse($request,","703":"$this->runRouteWithinStack($route, $request)","704":");","705":"}","706":null,"707":"\/**","708":"* Run the given route within a Stack \"onion\" instance.","709":"*","710":"* @param  \\Illuminate\\Routing\\Route  $route","711":"* @param  \\Illuminate\\Http\\Request  $request","712":"* @return mixed","713":"*\/","714":"protected function runRouteWithinStack(Route $route, Request $request)","715":"{","716":"$shouldSkipMiddleware = $this->container->bound('middleware.disable') &&","717":"$this->container->make('middleware.disable') === true;"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php","line_number":667,"method":"dispatchToRoute","class":"Illuminate\\Routing\\Router","code_snippet":{"652":"public function dispatch(Request $request)","653":"{","654":"$this->currentRequest = $request;","655":null,"656":"return $this->dispatchToRoute($request);","657":"}","658":null,"659":"\/**","660":"* Dispatch the request to a route and return the response.","661":"*","662":"* @param  \\Illuminate\\Http\\Request  $request","663":"* @return \\Symfony\\Component\\HttpFoundation\\Response","664":"*\/","665":"public function dispatchToRoute(Request $request)","666":"{","667":"return $this->runRoute($request, $this->findRoute($request));","668":"}","669":null,"670":"\/**","671":"* Find the route matching a given request.","672":"*","673":"* @param  \\Illuminate\\Http\\Request  $request","674":"* @return \\Illuminate\\Routing\\Route","675":"*\/","676":"protected function findRoute($request)","677":"{","678":"$this->events->dispatch(new Routing($request));","679":null,"680":"$this->current = $route = $this->routes->match($request);","681":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php","line_number":656,"method":"dispatch","class":"Illuminate\\Routing\\Router","code_snippet":{"641":"$route = tap($this->routes->getByName($name))->bind($this->currentRequest);","642":null,"643":"return $this->runRoute($this->currentRequest, $route);","644":"}","645":null,"646":"\/**","647":"* Dispatch the request to the application.","648":"*","649":"* @param  \\Illuminate\\Http\\Request  $request","650":"* @return \\Symfony\\Component\\HttpFoundation\\Response","651":"*\/","652":"public function dispatch(Request $request)","653":"{","654":"$this->currentRequest = $request;","655":null,"656":"return $this->dispatchToRoute($request);","657":"}","658":null,"659":"\/**","660":"* Dispatch the request to a route and return the response.","661":"*","662":"* @param  \\Illuminate\\Http\\Request  $request","663":"* @return \\Symfony\\Component\\HttpFoundation\\Response","664":"*\/","665":"public function dispatchToRoute(Request $request)","666":"{","667":"return $this->runRoute($request, $this->findRoute($request));","668":"}","669":null,"670":"\/**"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php","line_number":167,"method":"Illuminate\\Foundation\\Http\\{closure}","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"152":"if (! $this->app->hasBeenBootstrapped()) {","153":"$this->app->bootstrapWith($this->bootstrappers());","154":"}","155":"}","156":null,"157":"\/**","158":"* Get the route dispatcher callback.","159":"*","160":"* @return \\Closure","161":"*\/","162":"protected function dispatchToRouter()","163":"{","164":"return function ($request) {","165":"$this->app->instance('request', $request);","166":null,"167":"return $this->router->dispatch($request);","168":"};","169":"}","170":null,"171":"\/**","172":"* Call the terminate method on any terminable middleware.","173":"*","174":"* @param  \\Illuminate\\Http\\Request  $request","175":"* @param  \\Illuminate\\Http\\Response  $response","176":"* @return void","177":"*\/","178":"public function terminate($request, $response)","179":"{","180":"$this->terminateMiddleware($request, $response);","181":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":141,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"126":"return $this->then(function ($passable) {","127":"return $passable;","128":"});","129":"}","130":null,"131":"\/**","132":"* Get the final piece of the Closure onion.","133":"*","134":"* @param  \\Closure  $destination","135":"* @return \\Closure","136":"*\/","137":"protected function prepareDestination(Closure $destination)","138":"{","139":"return function ($passable) use ($destination) {","140":"try {","141":"return $destination($passable);","142":"} catch (Throwable $e) {","143":"return $this->handleException($passable, $e);","144":"}","145":"};","146":"}","147":null,"148":"\/**","149":"* Get a Closure that represents a slice of the application onion.","150":"*","151":"* @return \\Closure","152":"*\/","153":"protected function carry()","154":"{","155":"return function ($stack, $pipe) {"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/barryvdh\/laravel-debugbar\/src\/Middleware\/InjectDebugbar.php","line_number":67,"method":"handle","class":"Barryvdh\\Debugbar\\Middleware\\InjectDebugbar","code_snippet":{"52":"*","53":"* @param  Request  $request","54":"* @param  Closure  $next","55":"* @return mixed","56":"*\/","57":"public function handle($request, Closure $next)","58":"{","59":"if (!$this->debugbar->isEnabled() || $this->inExceptArray($request)) {","60":"return $next($request);","61":"}","62":null,"63":"$this->debugbar->boot();","64":null,"65":"try {","66":"\/** @var \\Illuminate\\Http\\Response $response *\/","67":"$response = $next($request);","68":"} catch (Exception $e) {","69":"$response = $this->handleException($request, $e);","70":"} catch (Error $error) {","71":"$e = new FatalThrowableError($error);","72":"$response = $this->handleException($request, $e);","73":"}","74":null,"75":"\/\/ Modify the response to add the Debugbar","76":"$this->debugbar->modifyResponse($request, $response);","77":null,"78":"return $response;","79":"}","80":null,"81":"\/**"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TransformsRequest.php","line_number":21,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest","code_snippet":{"6":"use Symfony\\Component\\HttpFoundation\\ParameterBag;","7":null,"8":"class TransformsRequest","9":"{","10":"\/**","11":"* Handle an incoming request.","12":"*","13":"* @param  \\Illuminate\\Http\\Request  $request","14":"* @param  \\Closure  $next","15":"* @return mixed","16":"*\/","17":"public function handle($request, Closure $next)","18":"{","19":"$this->clean($request);","20":null,"21":"return $next($request);","22":"}","23":null,"24":"\/**","25":"* Clean the request's data.","26":"*","27":"* @param  \\Illuminate\\Http\\Request  $request","28":"* @return void","29":"*\/","30":"protected function clean($request)","31":"{","32":"$this->cleanParameterBag($request->query);","33":null,"34":"if ($request->isJson()) {","35":"$this->cleanParameterBag($request->json());"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/ConvertEmptyStringsToNull.php","line_number":31,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull","code_snippet":{"16":"\/**","17":"* Handle an incoming request.","18":"*","19":"* @param  \\Illuminate\\Http\\Request  $request","20":"* @param  \\Closure  $next","21":"* @return mixed","22":"*\/","23":"public function handle($request, Closure $next)","24":"{","25":"foreach (static::$skipCallbacks as $callback) {","26":"if ($callback($request)) {","27":"return $next($request);","28":"}","29":"}","30":null,"31":"return parent::handle($request, $next);","32":"}","33":null,"34":"\/**","35":"* Transform the given value.","36":"*","37":"* @param  string  $key","38":"* @param  mixed  $value","39":"* @return mixed","40":"*\/","41":"protected function transform($key, $value)","42":"{","43":"return $value === '' ? null : $value;","44":"}","45":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TransformsRequest.php","line_number":21,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest","code_snippet":{"6":"use Symfony\\Component\\HttpFoundation\\ParameterBag;","7":null,"8":"class TransformsRequest","9":"{","10":"\/**","11":"* Handle an incoming request.","12":"*","13":"* @param  \\Illuminate\\Http\\Request  $request","14":"* @param  \\Closure  $next","15":"* @return mixed","16":"*\/","17":"public function handle($request, Closure $next)","18":"{","19":"$this->clean($request);","20":null,"21":"return $next($request);","22":"}","23":null,"24":"\/**","25":"* Clean the request's data.","26":"*","27":"* @param  \\Illuminate\\Http\\Request  $request","28":"* @return void","29":"*\/","30":"protected function clean($request)","31":"{","32":"$this->cleanParameterBag($request->query);","33":null,"34":"if ($request->isJson()) {","35":"$this->cleanParameterBag($request->json());"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TrimStrings.php","line_number":40,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TrimStrings","code_snippet":{"25":"\/**","26":"* Handle an incoming request.","27":"*","28":"* @param  \\Illuminate\\Http\\Request  $request","29":"* @param  \\Closure  $next","30":"* @return mixed","31":"*\/","32":"public function handle($request, Closure $next)","33":"{","34":"foreach (static::$skipCallbacks as $callback) {","35":"if ($callback($request)) {","36":"return $next($request);","37":"}","38":"}","39":null,"40":"return parent::handle($request, $next);","41":"}","42":null,"43":"\/**","44":"* Transform the given value.","45":"*","46":"* @param  string  $key","47":"* @param  mixed  $value","48":"* @return mixed","49":"*\/","50":"protected function transform($key, $value)","51":"{","52":"if (in_array($key, $this->except, true) || ! is_string($value)) {","53":"return $value;","54":"}"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/ValidatePostSize.php","line_number":27,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize","code_snippet":{"12":"*","13":"* @param  \\Illuminate\\Http\\Request  $request","14":"* @param  \\Closure  $next","15":"* @return mixed","16":"*","17":"* @throws \\Illuminate\\Http\\Exceptions\\PostTooLargeException","18":"*\/","19":"public function handle($request, Closure $next)","20":"{","21":"$max = $this->getPostMaxSize();","22":null,"23":"if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) {","24":"throw new PostTooLargeException;","25":"}","26":null,"27":"return $next($request);","28":"}","29":null,"30":"\/**","31":"* Determine the server 'post_max_size' as bytes.","32":"*","33":"* @return int","34":"*\/","35":"protected function getPostMaxSize()","36":"{","37":"if (is_numeric($postMaxSize = ini_get('post_max_size'))) {","38":"return (int) $postMaxSize;","39":"}","40":null,"41":"$metric = strtoupper(substr($postMaxSize, -1));"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/PreventRequestsDuringMaintenance.php","line_number":86,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance","code_snippet":{"71":"return response(","72":"$data['template'],","73":"$data['status'] ?? 503,","74":"$this->getHeaders($data)","75":");","76":"}","77":null,"78":"throw new HttpException(","79":"$data['status'] ?? 503,","80":"'Service Unavailable',","81":"null,","82":"$this->getHeaders($data)","83":");","84":"}","85":null,"86":"return $next($request);","87":"}","88":null,"89":"\/**","90":"* Determine if the incoming request has a maintenance mode bypass cookie.","91":"*","92":"* @param  \\Illuminate\\Http\\Request  $request","93":"* @param  array  $data","94":"* @return bool","95":"*\/","96":"protected function hasValidBypassCookie($request, array $data)","97":"{","98":"return isset($data['secret']) &&","99":"$request->cookie('laravel_maintenance') &&","100":"MaintenanceModeBypassCookie::isValid("},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Http\/Middleware\/HandleCors.php","line_number":49,"method":"handle","class":"Illuminate\\Http\\Middleware\\HandleCors","code_snippet":{"34":"{","35":"$this->container = $container;","36":"$this->cors = $cors;","37":"}","38":null,"39":"\/**","40":"* Handle the incoming request.","41":"*","42":"* @param  \\Illuminate\\Http\\Request  $request","43":"* @param  \\Closure  $next","44":"* @return \\Illuminate\\Http\\Response","45":"*\/","46":"public function handle($request, Closure $next)","47":"{","48":"if (! $this->hasMatchingPath($request)) {","49":"return $next($request);","50":"}","51":null,"52":"$this->cors->setOptions($this->container['config']->get('cors', []));","53":null,"54":"if ($this->cors->isPreflightRequest($request)) {","55":"$response = $this->cors->handlePreflightRequest($request);","56":null,"57":"$this->cors->varyHeader($response, 'Access-Control-Request-Method');","58":null,"59":"return $response;","60":"}","61":null,"62":"$response = $next($request);","63":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Http\/Middleware\/TrustProxies.php","line_number":39,"method":"handle","class":"Illuminate\\Http\\Middleware\\TrustProxies","code_snippet":{"24":"\/**","25":"* Handle an incoming request.","26":"*","27":"* @param  \\Illuminate\\Http\\Request  $request","28":"* @param  \\Closure  $next","29":"* @return mixed","30":"*","31":"* @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException","32":"*\/","33":"public function handle(Request $request, Closure $next)","34":"{","35":"$request::setTrustedProxies([], $this->getTrustedHeaderNames());","36":null,"37":"$this->setTrustedProxyIpAddresses($request);","38":null,"39":"return $next($request);","40":"}","41":null,"42":"\/**","43":"* Sets the trusted proxies on the request.","44":"*","45":"* @param  \\Illuminate\\Http\\Request  $request","46":"* @return void","47":"*\/","48":"protected function setTrustedProxyIpAddresses(Request $request)","49":"{","50":"$trustedIps = $this->proxies() ?: config('trustedproxy.proxies');","51":null,"52":"if ($trustedIps === '*' || $trustedIps === '**') {","53":"return $this->setTrustedProxyIpAddressesToTheCallingIp($request);"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":180,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"165":null,"166":"\/\/ If the pipe is a string we will parse the string and resolve the class out","167":"\/\/ of the dependency injection container. We can then build a callable and","168":"\/\/ execute the pipe function giving in the parameters that are required.","169":"$pipe = $this->getContainer()->make($name);","170":null,"171":"$parameters = array_merge([$passable, $stack], $parameters);","172":"} else {","173":"\/\/ If the pipe is already an object we'll just make a callable and pass it to","174":"\/\/ the pipe as-is. There is no need to do any extra parsing and formatting","175":"\/\/ since the object we're given was already a fully instantiated object.","176":"$parameters = [$passable, $stack];","177":"}","178":null,"179":"$carry = method_exists($pipe, $this->method)","180":"? $pipe->{$this->method}(...$parameters)","181":": $pipe(...$parameters);","182":null,"183":"return $this->handleCarry($carry);","184":"} catch (Throwable $e) {","185":"return $this->handleException($passable, $e);","186":"}","187":"};","188":"};","189":"}","190":null,"191":"\/**","192":"* Parse full pipe string to get name and parameters.","193":"*","194":"* @param  string  $pipe"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php","line_number":116,"method":"then","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"101":"return $this;","102":"}","103":null,"104":"\/**","105":"* Run the pipeline with a final destination callback.","106":"*","107":"* @param  \\Closure  $destination","108":"* @return mixed","109":"*\/","110":"public function then(Closure $destination)","111":"{","112":"$pipeline = array_reduce(","113":"array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)","114":");","115":null,"116":"return $pipeline($this->passable);","117":"}","118":null,"119":"\/**","120":"* Run the pipeline and return the result.","121":"*","122":"* @return mixed","123":"*\/","124":"public function thenReturn()","125":"{","126":"return $this->then(function ($passable) {","127":"return $passable;","128":"});","129":"}","130":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php","line_number":142,"method":"sendRequestThroughRouter","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"127":"*","128":"* @param  \\Illuminate\\Http\\Request  $request","129":"* @return \\Illuminate\\Http\\Response","130":"*\/","131":"protected function sendRequestThroughRouter($request)","132":"{","133":"$this->app->instance('request', $request);","134":null,"135":"Facade::clearResolvedInstance('request');","136":null,"137":"$this->bootstrap();","138":null,"139":"return (new Pipeline($this->app))","140":"->send($request)","141":"->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)","142":"->then($this->dispatchToRouter());","143":"}","144":null,"145":"\/**","146":"* Bootstrap the application for HTTP requests.","147":"*","148":"* @return void","149":"*\/","150":"public function bootstrap()","151":"{","152":"if (! $this->app->hasBeenBootstrapped()) {","153":"$this->app->bootstrapWith($this->bootstrappers());","154":"}","155":"}","156":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php","line_number":111,"method":"handle","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"96":null,"97":"$this->syncMiddlewareToRouter();","98":"}","99":null,"100":"\/**","101":"* Handle an incoming HTTP request.","102":"*","103":"* @param  \\Illuminate\\Http\\Request  $request","104":"* @return \\Illuminate\\Http\\Response","105":"*\/","106":"public function handle($request)","107":"{","108":"try {","109":"$request->enableHttpMethodParameterOverride();","110":null,"111":"$response = $this->sendRequestThroughRouter($request);","112":"} catch (Throwable $e) {","113":"$this->reportException($e);","114":null,"115":"$response = $this->renderException($request, $e);","116":"}","117":null,"118":"$this->app['events']->dispatch(","119":"new RequestHandled($request, $response)","120":");","121":null,"122":"return $response;","123":"}","124":null,"125":"\/**"},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/public\/index.php","line_number":52,"method":"require_once","class":null,"code_snippet":{"27":"|","28":"| Composer provides a convenient, automatically generated class loader for","29":"| this application. We just need to utilize it! We'll simply require it","30":"| into the script here so we don't need to manually load our classes.","31":"|","32":"*\/","33":null,"34":"require __DIR__.'\/..\/vendor\/autoload.php';","35":null,"36":"\/*","37":"|--------------------------------------------------------------------------","38":"| Run The Application","39":"|--------------------------------------------------------------------------","40":"|","41":"| Once we have the application, we can handle the incoming request using","42":"| the application's HTTP kernel. Then, we will send the response back","43":"| to this client's browser, allowing them to enjoy our application.","44":"|","45":"*\/","46":null,"47":"$app = require_once __DIR__.'\/..\/bootstrap\/app.php';","48":null,"49":"$kernel = $app->make(Kernel::class);","50":null,"51":"$response = $kernel->handle(","52":"$request = Request::capture()","53":")->send();","54":null,"55":"$kernel->terminate($request, $response);","56":null},"application_frame":true},{"file":"\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/resources\/server.php","line_number":16,"method":"[top]","class":null,"code_snippet":{"1":"<?php","2":null,"3":"$publicPath = getcwd();","4":null,"5":"$uri = urldecode(","6":"parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH) ?? ''","7":");","8":null,"9":"\/\/ This file allows us to emulate Apache's \"mod_rewrite\" functionality from the","10":"\/\/ built-in PHP web server. This provides a convenient way to test a Laravel","11":"\/\/ application without having installed a \"real\" web server software here.","12":"if ($uri !== '\/' && file_exists($publicPath.$uri)) {","13":"return false;","14":"}","15":null,"16":"require_once $publicPath.'\/index.php';","17":null},"application_frame":false}],"context":{"request":{"url":"http:\/\/localhost:8000\/","ip":null,"method":"GET","useragent":"Mozilla\/5.0 (X11; Linux x86_64; rv:101.0) Gecko\/20100101 Firefox\/101.0"},"request_data":{"queryString":[],"body":[],"files":[]},"headers":{"host":"localhost:8000","user-agent":"Mozilla\/5.0 (X11; Linux x86_64; rv:101.0) Gecko\/20100101 Firefox\/101.0","accept":"text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/avif,image\/webp,*\/*;q=0.8","accept-language":"en-US,en;q=0.5","accept-encoding":"gzip, deflate, br","dnt":"1","connection":"keep-alive","cookie":"XSRF-TOKEN=eyJpdiI6Inl1RjI3czJKdEIzWDlqZklYcjVBM3c9PSIsInZhbHVlIjoiK2wyYkp3NThoTUMwU2QvSnJDTGFtQXo0MFQveUFLMmNzVGhtUUd5UjAvdnNMUTJ1UHVUT2MxU0MwbzdYTk9vQ2lPMXVqUmNNaE40dnMwb0k0REZDcXZ3cmZXMm5JdUNGVFVURXhPYy9NcXdVeEFvR2NLV0l5WGEzTDVBWWVtQXMiLCJtYWMiOiI4NDk4OTM3ZjI3OGU2Njg2MzdiMjJmOTE1ZDE4ZmVhZGQ5OGE3YWUwOWE2MmFjMDI4MGI2MWZkYTZiOGE4Y2Y4IiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IjFHbGpCdXRoMVpVQmc3QlZpaVl2V2c9PSIsInZhbHVlIjoiQ01xdVdMQmlTRzQrYS9Na2tsdTd5dTkwbmlCZ2doME0xZTZQaGtqcTBNcFR4a0JGZkJIdTRzaHNVQlp4QkVrVG9xOGlVbzhvWlBFdFZDRmZCOU4yMGZoSEp0NGxubTdDR0p3cG5Zd2NTR0NuUnYrZ2ZydU9RQk5MVXVpYytRQTgiLCJtYWMiOiJmOGQ5MjY1MjMyZjhiODIxNWRhMTI1OTBiNmM4YjAyM2VjZWRlNjM1MDExNTUzOTIwNTUyZGJiYjFlZTViMDA5IiwidGFnIjoiIn0%3D","upgrade-insecure-requests":"1","sec-fetch-dest":"document","sec-fetch-mode":"navigate","sec-fetch-site":"none","sec-fetch-user":"?1","pragma":"no-cache","cache-control":"no-cache"},"cookies":{"XSRF-TOKEN":"NHQcPjJzm6T7Rlz0BdSRadWBvuq2wYdcWjU9IbCg","laravel_session":"xdyEOpqVCyQd1l3aid2yjdGdOPLSMnI4yCV6XRc1"},"session":{"_token":"NHQcPjJzm6T7Rlz0BdSRadWBvuq2wYdcWjU9IbCg","_previous":{"url":"http:\/\/localhost:8000\/display"},"_flash":{"old":[],"new":[]},"login_web_59ba36addc2b2f9401580f014c7f58ea4e30989d":4,"test":"123"},"route":{"route":null,"routeParameters":[],"controllerAction":"Closure","middleware":["web"]},"user":{"name":"Danika Simonis","email":"hkuhn@example.net","email_verified_at":"2022-06-30T21:55:13.000000Z","updated_at":"2022-06-30T21:55:13.000000Z","created_at":"2022-06-30T21:55:13.000000Z","id":4},"env":{"php_version":"8.1.7","laravel_version":"9.19.0","laravel_locale":"en","laravel_config_cached":false,"app_debug":true,"app_env":"local"},"git":{"hash":"fbfe4d6a5c1ea08306f1e06682254f5f16d452fb","message":"Vite support added","tag":null,"remote":"git@github.com:Wulfheart\/open-flare.git","isDirty":true},"dumps":[],"logs":[{"message":"Hello test","level":"debug","context":[],"microtime":1656626113.809813}],"queries":[{"sql":"insert into `users` (`name`, `email`, `email_verified_at`, `password`, `remember_token`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?, ?, ?)","time":41.01,"connection_name":"mysql","bindings":["Danika Simonis","hkuhn@example.net","2022-06-30 21:55:13","$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC\/.og\/at2.uheWG\/igi","2fvTPn0UBA","2022-06-30 21:55:13","2022-06-30 21:55:13"],"microtime":1656626113.806754}]},"stage":"local","message_level":null,"open_frame_index":null,"application_path":null,"application_version":null,"tracking_uuid":"1a6eba9e-b459-4375-8882-6752568135ef"}