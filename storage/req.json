{
  "notifier": "Laravel Client",
  "language": "PHP",
  "framework_version": "9.17.0",
  "language_version": "8.1.7",
  "exception_class": "Exception",
  "seen_at": 1655848477,
  "message": "JobException",
  "glows": [],
  "solutions": [],
  "documentation_links": [],
  "stacktrace": [
    {
      "file": "\/home\/alex\/Code\/open-flare\/app\/Jobs\/TestJob.php",
      "line_number": 35,
      "method": "handle",
      "class": "App\\Jobs\\TestJob",
      "code_snippet": {
        "9": "use Illuminate\\Queue\\InteractsWithQueue;",
        "10": "use Illuminate\\Queue\\SerializesModels;",
        "11": null,
        "12": "class TestJob implements ShouldQueue",
        "13": "{",
        "14": "use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;",
        "15": null,
        "16": "\/**",
        "17": "* Create a new job instance.",
        "18": "*",
        "19": "* @return void",
        "20": "*\/",
        "21": "public function __construct(",
        "22": "public int $x",
        "23": ")",
        "24": "{",
        "25": "\/\/",
        "26": "}",
        "27": null,
        "28": "\/**",
        "29": "* Execute the job.",
        "30": "*",
        "31": "* @return void",
        "32": "*\/",
        "33": "public function handle()",
        "34": "{",
        "35": "throw new \\Exception(\"JobException\");",
        "36": "}",
        "37": "}",
        "38": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 36,
      "method": "Illuminate\\Container\\{closure}",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "21": "*",
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Util.php",
      "line_number": 41,
      "method": "unwrapIfClosure",
      "class": "Illuminate\\Container\\Util",
      "code_snippet": {
        "26": null,
        "27": "return is_array($value) ? $value : [$value];",
        "28": "}",
        "29": null,
        "30": "\/**",
        "31": "* Return the default value of the given value.",
        "32": "*",
        "33": "* From global value() helper in Illuminate\\Support.",
        "34": "*",
        "35": "* @param  mixed  $value",
        "36": "* @param  mixed  ...$args",
        "37": "* @return mixed",
        "38": "*\/",
        "39": "public static function unwrapIfClosure($value, ...$args)",
        "40": "{",
        "41": "return $value instanceof Closure ? $value(...$args) : $value;",
        "42": "}",
        "43": null,
        "44": "\/**",
        "45": "* Get the class name of the given parameter's type, if possible.",
        "46": "*",
        "47": "* From Reflector::getParameterClassName() in Illuminate\\Support.",
        "48": "*",
        "49": "* @param  \\ReflectionParameter  $parameter",
        "50": "* @return string|null",
        "51": "*\/",
        "52": "public static function getParameterClassName($parameter)",
        "53": "{",
        "54": "$type = $parameter->getType();",
        "55": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 93,
      "method": "callBoundMethod",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "78": "protected static function callBoundMethod($container, $callback, $default)",
        "79": "{",
        "80": "if (! is_array($callback)) {",
        "81": "return Util::unwrapIfClosure($default);",
        "82": "}",
        "83": null,
        "84": "\/\/ Here we need to turn the array callable into a Class@method string we can use to",
        "85": "\/\/ examine the container and see if there are any method bindings for this given",
        "86": "\/\/ method. If there are, we can call this method binding callback immediately.",
        "87": "$method = static::normalizeMethod($callback);",
        "88": null,
        "89": "if ($container->hasMethodBinding($method)) {",
        "90": "return $container->callMethodBinding($method, $callback[0]);",
        "91": "}",
        "92": null,
        "93": "return Util::unwrapIfClosure($default);",
        "94": "}",
        "95": null,
        "96": "\/**",
        "97": "* Normalize the given callback into a Class@method string.",
        "98": "*",
        "99": "* @param  callable  $callback",
        "100": "* @return string",
        "101": "*\/",
        "102": "protected static function normalizeMethod($callback)",
        "103": "{",
        "104": "$class = is_string($callback[0]) ? $callback[0] : get_class($callback[0]);",
        "105": null,
        "106": "return \"{$class}@{$callback[1]}\";",
        "107": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/BoundMethod.php",
      "line_number": 37,
      "method": "call",
      "class": "Illuminate\\Container\\BoundMethod",
      "code_snippet": {
        "22": "* @throws \\ReflectionException",
        "23": "* @throws \\InvalidArgumentException",
        "24": "*\/",
        "25": "public static function call($container, $callback, array $parameters = [], $defaultMethod = null)",
        "26": "{",
        "27": "if (is_string($callback) && ! $defaultMethod && method_exists($callback, '__invoke')) {",
        "28": "$defaultMethod = '__invoke';",
        "29": "}",
        "30": null,
        "31": "if (static::isCallableWithAtSign($callback) || $defaultMethod) {",
        "32": "return static::callClass($container, $callback, $parameters, $defaultMethod);",
        "33": "}",
        "34": null,
        "35": "return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {",
        "36": "return $callback(...array_values(static::getMethodDependencies($container, $callback, $parameters)));",
        "37": "});",
        "38": "}",
        "39": null,
        "40": "\/**",
        "41": "* Call a string reference to a class using Class@method syntax.",
        "42": "*",
        "43": "* @param  \\Illuminate\\Container\\Container  $container",
        "44": "* @param  string  $target",
        "45": "* @param  array  $parameters",
        "46": "* @param  string|null  $defaultMethod",
        "47": "* @return mixed",
        "48": "*",
        "49": "* @throws \\InvalidArgumentException",
        "50": "*\/",
        "51": "protected static function callClass($container, $target, array $parameters = [], $defaultMethod = null)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Container\/Container.php",
      "line_number": 651,
      "method": "call",
      "class": "Illuminate\\Container\\Container",
      "code_snippet": {
        "636": "};",
        "637": "}",
        "638": null,
        "639": "\/**",
        "640": "* Call the given Closure \/ class@method and inject its dependencies.",
        "641": "*",
        "642": "* @param  callable|string  $callback",
        "643": "* @param  array<string, mixed>  $parameters",
        "644": "* @param  string|null  $defaultMethod",
        "645": "* @return mixed",
        "646": "*",
        "647": "* @throws \\InvalidArgumentException",
        "648": "*\/",
        "649": "public function call($callback, array $parameters = [], $defaultMethod = null)",
        "650": "{",
        "651": "return BoundMethod::call($this, $callback, $parameters, $defaultMethod);",
        "652": "}",
        "653": null,
        "654": "\/**",
        "655": "* Get a closure to resolve the given type from the container.",
        "656": "*",
        "657": "* @param  string  $abstract",
        "658": "* @return \\Closure",
        "659": "*\/",
        "660": "public function factory($abstract)",
        "661": "{",
        "662": "return function () use ($abstract) {",
        "663": "return $this->make($abstract);",
        "664": "};",
        "665": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 128,
      "method": "Illuminate\\Bus\\{closure}",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "113": "in_array(Queueable::class, $uses) &&",
        "114": "! $command->job) {",
        "115": "$command->setJob(new SyncJob($this->container, json_encode([]), 'sync', 'sync'));",
        "116": "}",
        "117": null,
        "118": "if ($handler || $handler = $this->getCommandHandler($command)) {",
        "119": "$callback = function ($command) use ($handler) {",
        "120": "$method = method_exists($handler, 'handle') ? 'handle' : '__invoke';",
        "121": null,
        "122": "return $handler->{$method}($command);",
        "123": "};",
        "124": "} else {",
        "125": "$callback = function ($command) {",
        "126": "$method = method_exists($command, 'handle') ? 'handle' : '__invoke';",
        "127": null,
        "128": "return $this->container->call([$command, $method]);",
        "129": "};",
        "130": "}",
        "131": null,
        "132": "return $this->pipeline->send($command)->through($this->pipes)->then($callback);",
        "133": "}",
        "134": null,
        "135": "\/**",
        "136": "* Attempt to find the batch with the given ID.",
        "137": "*",
        "138": "* @param  string  $batchId",
        "139": "* @return \\Illuminate\\Bus\\Batch|null",
        "140": "*\/",
        "141": "public function findBatch(string $batchId)",
        "142": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 141,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null,
        "131": "\/**",
        "132": "* Get the final piece of the Closure onion.",
        "133": "*",
        "134": "* @param  \\Closure  $destination",
        "135": "* @return \\Closure",
        "136": "*\/",
        "137": "protected function prepareDestination(Closure $destination)",
        "138": "{",
        "139": "return function ($passable) use ($destination) {",
        "140": "try {",
        "141": "return $destination($passable);",
        "142": "} catch (Throwable $e) {",
        "143": "return $this->handleException($passable, $e);",
        "144": "}",
        "145": "};",
        "146": "}",
        "147": null,
        "148": "\/**",
        "149": "* Get a Closure that represents a slice of the application onion.",
        "150": "*",
        "151": "* @return \\Closure",
        "152": "*\/",
        "153": "protected function carry()",
        "154": "{",
        "155": "return function ($stack, $pipe) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 116,
      "method": "then",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "101": "return $this;",
        "102": "}",
        "103": null,
        "104": "\/**",
        "105": "* Run the pipeline with a final destination callback.",
        "106": "*",
        "107": "* @param  \\Closure  $destination",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "public function then(Closure $destination)",
        "111": "{",
        "112": "$pipeline = array_reduce(",
        "113": "array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
        "114": ");",
        "115": null,
        "116": "return $pipeline($this->passable);",
        "117": "}",
        "118": null,
        "119": "\/**",
        "120": "* Run the pipeline and return the result.",
        "121": "*",
        "122": "* @return mixed",
        "123": "*\/",
        "124": "public function thenReturn()",
        "125": "{",
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 132,
      "method": "dispatchNow",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "117": null,
        "118": "if ($handler || $handler = $this->getCommandHandler($command)) {",
        "119": "$callback = function ($command) use ($handler) {",
        "120": "$method = method_exists($handler, 'handle') ? 'handle' : '__invoke';",
        "121": null,
        "122": "return $handler->{$method}($command);",
        "123": "};",
        "124": "} else {",
        "125": "$callback = function ($command) {",
        "126": "$method = method_exists($command, 'handle') ? 'handle' : '__invoke';",
        "127": null,
        "128": "return $this->container->call([$command, $method]);",
        "129": "};",
        "130": "}",
        "131": null,
        "132": "return $this->pipeline->send($command)->through($this->pipes)->then($callback);",
        "133": "}",
        "134": null,
        "135": "\/**",
        "136": "* Attempt to find the batch with the given ID.",
        "137": "*",
        "138": "* @param  string  $batchId",
        "139": "* @return \\Illuminate\\Bus\\Batch|null",
        "140": "*\/",
        "141": "public function findBatch(string $batchId)",
        "142": "{",
        "143": "return $this->container->make(BatchRepository::class)->find($batchId);",
        "144": "}",
        "145": null,
        "146": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php",
      "line_number": 123,
      "method": "Illuminate\\Queue\\{closure}",
      "class": "Illuminate\\Queue\\CallQueuedHandler",
      "code_snippet": {
        "108": "*",
        "109": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "110": "* @param  mixed  $command",
        "111": "* @return mixed",
        "112": "*\/",
        "113": "protected function dispatchThroughMiddleware(Job $job, $command)",
        "114": "{",
        "115": "if ($command instanceof \\__PHP_Incomplete_Class) {",
        "116": "throw new \\Exception('Job is incomplete class: '.json_encode($command));",
        "117": "}",
        "118": null,
        "119": "return (new Pipeline($this->container))->send($command)",
        "120": "->through(array_merge(method_exists($command, 'middleware') ? $command->middleware() : [], $command->middleware ?? []))",
        "121": "->then(function ($command) use ($job) {",
        "122": "return $this->dispatcher->dispatchNow(",
        "123": "$command, $this->resolveHandler($job, $command)",
        "124": ");",
        "125": "});",
        "126": "}",
        "127": null,
        "128": "\/**",
        "129": "* Resolve the handler for the given command.",
        "130": "*",
        "131": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "132": "* @param  mixed  $command",
        "133": "* @return mixed",
        "134": "*\/",
        "135": "protected function resolveHandler($job, $command)",
        "136": "{",
        "137": "$handler = $this->dispatcher->getCommandHandler($command) ?: null;"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 141,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null,
        "131": "\/**",
        "132": "* Get the final piece of the Closure onion.",
        "133": "*",
        "134": "* @param  \\Closure  $destination",
        "135": "* @return \\Closure",
        "136": "*\/",
        "137": "protected function prepareDestination(Closure $destination)",
        "138": "{",
        "139": "return function ($passable) use ($destination) {",
        "140": "try {",
        "141": "return $destination($passable);",
        "142": "} catch (Throwable $e) {",
        "143": "return $this->handleException($passable, $e);",
        "144": "}",
        "145": "};",
        "146": "}",
        "147": null,
        "148": "\/**",
        "149": "* Get a Closure that represents a slice of the application onion.",
        "150": "*",
        "151": "* @return \\Closure",
        "152": "*\/",
        "153": "protected function carry()",
        "154": "{",
        "155": "return function ($stack, $pipe) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 116,
      "method": "then",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "101": "return $this;",
        "102": "}",
        "103": null,
        "104": "\/**",
        "105": "* Run the pipeline with a final destination callback.",
        "106": "*",
        "107": "* @param  \\Closure  $destination",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "public function then(Closure $destination)",
        "111": "{",
        "112": "$pipeline = array_reduce(",
        "113": "array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
        "114": ");",
        "115": null,
        "116": "return $pipeline($this->passable);",
        "117": "}",
        "118": null,
        "119": "\/**",
        "120": "* Run the pipeline and return the result.",
        "121": "*",
        "122": "* @return mixed",
        "123": "*\/",
        "124": "public function thenReturn()",
        "125": "{",
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php",
      "line_number": 125,
      "method": "dispatchThroughMiddleware",
      "class": "Illuminate\\Queue\\CallQueuedHandler",
      "code_snippet": {
        "110": "* @param  mixed  $command",
        "111": "* @return mixed",
        "112": "*\/",
        "113": "protected function dispatchThroughMiddleware(Job $job, $command)",
        "114": "{",
        "115": "if ($command instanceof \\__PHP_Incomplete_Class) {",
        "116": "throw new \\Exception('Job is incomplete class: '.json_encode($command));",
        "117": "}",
        "118": null,
        "119": "return (new Pipeline($this->container))->send($command)",
        "120": "->through(array_merge(method_exists($command, 'middleware') ? $command->middleware() : [], $command->middleware ?? []))",
        "121": "->then(function ($command) use ($job) {",
        "122": "return $this->dispatcher->dispatchNow(",
        "123": "$command, $this->resolveHandler($job, $command)",
        "124": ");",
        "125": "});",
        "126": "}",
        "127": null,
        "128": "\/**",
        "129": "* Resolve the handler for the given command.",
        "130": "*",
        "131": "* @param  \\Illuminate\\Contracts\\Queue\\Job  $job",
        "132": "* @param  mixed  $command",
        "133": "* @return mixed",
        "134": "*\/",
        "135": "protected function resolveHandler($job, $command)",
        "136": "{",
        "137": "$handler = $this->dispatcher->getCommandHandler($command) ?: null;",
        "138": null,
        "139": "if ($handler) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/CallQueuedHandler.php",
      "line_number": 69,
      "method": "call",
      "class": "Illuminate\\Queue\\CallQueuedHandler",
      "code_snippet": {
        "54": "*\/",
        "55": "public function call(Job $job, array $data)",
        "56": "{",
        "57": "try {",
        "58": "$command = $this->setJobInstanceIfNecessary(",
        "59": "$job, $this->getCommand($data)",
        "60": ");",
        "61": "} catch (ModelNotFoundException $e) {",
        "62": "return $this->handleModelNotFound($job, $e);",
        "63": "}",
        "64": null,
        "65": "if ($command instanceof ShouldBeUniqueUntilProcessing) {",
        "66": "$this->ensureUniqueJobLockIsReleased($command);",
        "67": "}",
        "68": null,
        "69": "$this->dispatchThroughMiddleware($job, $command);",
        "70": null,
        "71": "if (! $job->isReleased() && ! $command instanceof ShouldBeUniqueUntilProcessing) {",
        "72": "$this->ensureUniqueJobLockIsReleased($command);",
        "73": "}",
        "74": null,
        "75": "if (! $job->hasFailed() && ! $job->isReleased()) {",
        "76": "$this->ensureNextJobInChainIsDispatched($command);",
        "77": "$this->ensureSuccessfulBatchJobIsRecorded($command);",
        "78": "}",
        "79": null,
        "80": "if (! $job->isDeletedOrReleased()) {",
        "81": "$job->delete();",
        "82": "}",
        "83": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/Jobs\/Job.php",
      "line_number": 98,
      "method": "fire",
      "class": "Illuminate\\Queue\\Jobs\\Job",
      "code_snippet": {
        "83": "{",
        "84": "return $this->payload()['uuid'] ?? null;",
        "85": "}",
        "86": null,
        "87": "\/**",
        "88": "* Fire the job.",
        "89": "*",
        "90": "* @return void",
        "91": "*\/",
        "92": "public function fire()",
        "93": "{",
        "94": "$payload = $this->payload();",
        "95": null,
        "96": "[$class, $method] = JobName::parse($payload['job']);",
        "97": null,
        "98": "($this->instance = $this->resolve($class))->{$method}($this, $payload['data']);",
        "99": "}",
        "100": null,
        "101": "\/**",
        "102": "* Delete the job from the queue.",
        "103": "*",
        "104": "* @return void",
        "105": "*\/",
        "106": "public function delete()",
        "107": "{",
        "108": "$this->deleted = true;",
        "109": "}",
        "110": null,
        "111": "\/**",
        "112": "* Determine if the job has been deleted."
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Queue\/SyncQueue.php",
      "line_number": 43,
      "method": "push",
      "class": "Illuminate\\Queue\\SyncQueue",
      "code_snippet": {
        "28": "*",
        "29": "* @param  string  $job",
        "30": "* @param  mixed  $data",
        "31": "* @param  string|null  $queue",
        "32": "* @return mixed",
        "33": "*",
        "34": "* @throws \\Throwable",
        "35": "*\/",
        "36": "public function push($job, $data = '', $queue = null)",
        "37": "{",
        "38": "$queueJob = $this->resolveJob($this->createPayload($job, $queue, $data), $queue);",
        "39": null,
        "40": "try {",
        "41": "$this->raiseBeforeJobEvent($queueJob);",
        "42": null,
        "43": "$queueJob->fire();",
        "44": null,
        "45": "$this->raiseAfterJobEvent($queueJob);",
        "46": "} catch (Throwable $e) {",
        "47": "$this->handleException($queueJob, $e);",
        "48": "}",
        "49": null,
        "50": "return 0;",
        "51": "}",
        "52": null,
        "53": "\/**",
        "54": "* Resolve a Sync job instance.",
        "55": "*",
        "56": "* @param  string  $payload",
        "57": "* @param  string  $queue"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 253,
      "method": "pushCommandToQueue",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "238": "*\/",
        "239": "protected function pushCommandToQueue($queue, $command)",
        "240": "{",
        "241": "if (isset($command->queue, $command->delay)) {",
        "242": "return $queue->laterOn($command->queue, $command->delay, $command);",
        "243": "}",
        "244": null,
        "245": "if (isset($command->queue)) {",
        "246": "return $queue->pushOn($command->queue, $command);",
        "247": "}",
        "248": null,
        "249": "if (isset($command->delay)) {",
        "250": "return $queue->later($command->delay, $command);",
        "251": "}",
        "252": null,
        "253": "return $queue->push($command);",
        "254": "}",
        "255": null,
        "256": "\/**",
        "257": "* Dispatch a command to its appropriate handler after the current process.",
        "258": "*",
        "259": "* @param  mixed  $command",
        "260": "* @param  mixed  $handler",
        "261": "* @return void",
        "262": "*\/",
        "263": "public function dispatchAfterResponse($command, $handler = null)",
        "264": "{",
        "265": "$this->container->terminating(function () use ($command, $handler) {",
        "266": "$this->dispatchNow($command, $handler);",
        "267": "});"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 229,
      "method": "dispatchToQueue",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "214": "*\/",
        "215": "public function dispatchToQueue($command)",
        "216": "{",
        "217": "$connection = $command->connection ?? null;",
        "218": null,
        "219": "$queue = call_user_func($this->queueResolver, $connection);",
        "220": null,
        "221": "if (! $queue instanceof Queue) {",
        "222": "throw new RuntimeException('Queue resolver did not return a Queue implementation.');",
        "223": "}",
        "224": null,
        "225": "if (method_exists($command, 'queue')) {",
        "226": "return $command->queue($queue, $command);",
        "227": "}",
        "228": null,
        "229": "return $this->pushCommandToQueue($queue, $command);",
        "230": "}",
        "231": null,
        "232": "\/**",
        "233": "* Push the command onto the given queue instance.",
        "234": "*",
        "235": "* @param  \\Illuminate\\Contracts\\Queue\\Queue  $queue",
        "236": "* @param  mixed  $command",
        "237": "* @return mixed",
        "238": "*\/",
        "239": "protected function pushCommandToQueue($queue, $command)",
        "240": "{",
        "241": "if (isset($command->queue, $command->delay)) {",
        "242": "return $queue->laterOn($command->queue, $command->delay, $command);",
        "243": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Bus\/Dispatcher.php",
      "line_number": 77,
      "method": "dispatch",
      "class": "Illuminate\\Bus\\Dispatcher",
      "code_snippet": {
        "62": "{",
        "63": "$this->container = $container;",
        "64": "$this->queueResolver = $queueResolver;",
        "65": "$this->pipeline = new Pipeline($container);",
        "66": "}",
        "67": null,
        "68": "\/**",
        "69": "* Dispatch a command to its appropriate handler.",
        "70": "*",
        "71": "* @param  mixed  $command",
        "72": "* @return mixed",
        "73": "*\/",
        "74": "public function dispatch($command)",
        "75": "{",
        "76": "return $this->queueResolver && $this->commandShouldBeQueued($command)",
        "77": "? $this->dispatchToQueue($command)",
        "78": ": $this->dispatchNow($command);",
        "79": "}",
        "80": null,
        "81": "\/**",
        "82": "* Dispatch a command to its appropriate handler in the current process.",
        "83": "*",
        "84": "* Queueable jobs will be dispatched to the \"sync\" queue.",
        "85": "*",
        "86": "* @param  mixed  $command",
        "87": "* @param  mixed  $handler",
        "88": "* @return mixed",
        "89": "*\/",
        "90": "public function dispatchSync($command, $handler = null)",
        "91": "{"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Bus\/PendingDispatch.php",
      "line_number": 193,
      "method": "__destruct",
      "class": "Illuminate\\Foundation\\Bus\\PendingDispatch",
      "code_snippet": {
        "168": "* Dynamically proxy methods to the underlying job.",
        "169": "*",
        "170": "* @param  string  $method",
        "171": "* @param  array  $parameters",
        "172": "* @return $this",
        "173": "*\/",
        "174": "public function __call($method, $parameters)",
        "175": "{",
        "176": "$this->job->{$method}(...$parameters);",
        "177": null,
        "178": "return $this;",
        "179": "}",
        "180": null,
        "181": "\/**",
        "182": "* Handle the object's destruction.",
        "183": "*",
        "184": "* @return void",
        "185": "*\/",
        "186": "public function __destruct()",
        "187": "{",
        "188": "if (! $this->shouldDispatch()) {",
        "189": "return;",
        "190": "} elseif ($this->afterResponse) {",
        "191": "app(Dispatcher::class)->dispatchAfterResponse($this->job);",
        "192": "} else {",
        "193": "app(Dispatcher::class)->dispatch($this->job);",
        "194": "}",
        "195": "}",
        "196": "}",
        "197": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/helpers.php",
      "line_number": 389,
      "method": "dispatch",
      "class": null,
      "code_snippet": {
        "374": "return app('encrypter')->decrypt($value, $unserialize);",
        "375": "}",
        "376": "}",
        "377": null,
        "378": "if (! function_exists('dispatch')) {",
        "379": "\/**",
        "380": "* Dispatch a job to its appropriate handler.",
        "381": "*",
        "382": "* @param  mixed  $job",
        "383": "* @return \\Illuminate\\Foundation\\Bus\\PendingDispatch",
        "384": "*\/",
        "385": "function dispatch($job)",
        "386": "{",
        "387": "return $job instanceof Closure",
        "388": "? new PendingClosureDispatch(CallQueuedClosure::create($job))",
        "389": ": new PendingDispatch($job);",
        "390": "}",
        "391": "}",
        "392": null,
        "393": "if (! function_exists('dispatch_sync')) {",
        "394": "\/**",
        "395": "* Dispatch a command to its appropriate handler in the current process.",
        "396": "*",
        "397": "* Queueable jobs will be dispatched to the \"sync\" queue.",
        "398": "*",
        "399": "* @param  mixed  $job",
        "400": "* @param  mixed  $handler",
        "401": "* @return mixed",
        "402": "*\/",
        "403": "function dispatch_sync($job, $handler = null)"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/routes\/web.php",
      "line_number": 35,
      "method": "{closure}",
      "class": "Illuminate\\Routing\\RouteFileRegistrar",
      "code_snippet": {
        "8": "use Illuminate\\Support\\Facades\\Auth;",
        "9": "use Illuminate\\Support\\Facades\\Log;",
        "10": "use Illuminate\\Support\\Facades\\Route;",
        "11": "use Illuminate\\Support\\Facades\\Session;",
        "12": null,
        "13": "\/*",
        "14": "|--------------------------------------------------------------------------",
        "15": "| Web Routes",
        "16": "|--------------------------------------------------------------------------",
        "17": "|",
        "18": "| Here is where you can register web routes for your application. These",
        "19": "| routes are loaded by the RouteServiceProvider within a group which",
        "20": "| contains the \"web\" middleware group. Now create something great!",
        "21": "|",
        "22": "*\/",
        "23": null,
        "24": "Route::get('\/', function (Request $request) {",
        "25": "Auth::login(User::factory()->create());",
        "26": "$request->session()->put('test', \"123\");",
        "27": "Log::debug(\"Hello test\");",
        "28": "throw new Exception(\"HELP\");",
        "29": "return view('welcome');",
        "30": "});",
        "31": null,
        "32": "Route::get('\/data', ExceptionController::class);",
        "33": null,
        "34": "Route::get('\/job', function (){",
        "35": "dispatch(new TestJob(1));",
        "36": "\/\/ return response();",
        "37": "});"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Route.php",
      "line_number": 237,
      "method": "runCallable",
      "class": "Illuminate\\Routing\\Route",
      "code_snippet": {
        "222": null,
        "223": "\/**",
        "224": "* Run the route action and return the response.",
        "225": "*",
        "226": "* @return mixed",
        "227": "*\/",
        "228": "protected function runCallable()",
        "229": "{",
        "230": "$callable = $this->action['uses'];",
        "231": null,
        "232": "if ($this->isSerializedClosure()) {",
        "233": "$callable = unserialize($this->action['uses'])->getClosure();",
        "234": "}",
        "235": null,
        "236": "return $callable(...array_values($this->resolveMethodDependencies(",
        "237": "$this->parametersWithoutNulls(), new ReflectionFunction($callable)",
        "238": ")));",
        "239": "}",
        "240": null,
        "241": "\/**",
        "242": "* Determine if the route action is a serialized Closure.",
        "243": "*",
        "244": "* @return bool",
        "245": "*\/",
        "246": "protected function isSerializedClosure()",
        "247": "{",
        "248": "return RouteAction::containsSerializedClosure($this->action);",
        "249": "}",
        "250": null,
        "251": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Route.php",
      "line_number": 207,
      "method": "run",
      "class": "Illuminate\\Routing\\Route",
      "code_snippet": {
        "192": null,
        "193": "\/**",
        "194": "* Run the route action and return the response.",
        "195": "*",
        "196": "* @return mixed",
        "197": "*\/",
        "198": "public function run()",
        "199": "{",
        "200": "$this->container = $this->container ?: new Container;",
        "201": null,
        "202": "try {",
        "203": "if ($this->isControllerAction()) {",
        "204": "return $this->runController();",
        "205": "}",
        "206": null,
        "207": "return $this->runCallable();",
        "208": "} catch (HttpResponseException $e) {",
        "209": "return $e->getResponse();",
        "210": "}",
        "211": "}",
        "212": null,
        "213": "\/**",
        "214": "* Checks whether the route's action is a controller.",
        "215": "*",
        "216": "* @return bool",
        "217": "*\/",
        "218": "protected function isControllerAction()",
        "219": "{",
        "220": "return is_string($this->action['uses']) && ! $this->isSerializedClosure();",
        "221": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
      "line_number": 725,
      "method": "Illuminate\\Routing\\{closure}",
      "class": "Illuminate\\Routing\\Router",
      "code_snippet": {
        "710": "* @param  \\Illuminate\\Routing\\Route  $route",
        "711": "* @param  \\Illuminate\\Http\\Request  $request",
        "712": "* @return mixed",
        "713": "*\/",
        "714": "protected function runRouteWithinStack(Route $route, Request $request)",
        "715": "{",
        "716": "$shouldSkipMiddleware = $this->container->bound('middleware.disable') &&",
        "717": "$this->container->make('middleware.disable') === true;",
        "718": null,
        "719": "$middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);",
        "720": null,
        "721": "return (new Pipeline($this->container))",
        "722": "->send($request)",
        "723": "->through($middleware)",
        "724": "->then(fn ($request) => $this->prepareResponse(",
        "725": "$request, $route->run()",
        "726": "));",
        "727": "}",
        "728": null,
        "729": "\/**",
        "730": "* Gather the middleware for the given route with resolved class names.",
        "731": "*",
        "732": "* @param  \\Illuminate\\Routing\\Route  $route",
        "733": "* @return array",
        "734": "*\/",
        "735": "public function gatherRouteMiddleware(Route $route)",
        "736": "{",
        "737": "return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware());",
        "738": "}",
        "739": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 141,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null,
        "131": "\/**",
        "132": "* Get the final piece of the Closure onion.",
        "133": "*",
        "134": "* @param  \\Closure  $destination",
        "135": "* @return \\Closure",
        "136": "*\/",
        "137": "protected function prepareDestination(Closure $destination)",
        "138": "{",
        "139": "return function ($passable) use ($destination) {",
        "140": "try {",
        "141": "return $destination($passable);",
        "142": "} catch (Throwable $e) {",
        "143": "return $this->handleException($passable, $e);",
        "144": "}",
        "145": "};",
        "146": "}",
        "147": null,
        "148": "\/**",
        "149": "* Get a Closure that represents a slice of the application onion.",
        "150": "*",
        "151": "* @return \\Closure",
        "152": "*\/",
        "153": "protected function carry()",
        "154": "{",
        "155": "return function ($stack, $pipe) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Middleware\/SubstituteBindings.php",
      "line_number": 50,
      "method": "handle",
      "class": "Illuminate\\Routing\\Middleware\\SubstituteBindings",
      "code_snippet": {
        "24": "public function __construct(Registrar $router)",
        "25": "{",
        "26": "$this->router = $router;",
        "27": "}",
        "28": null,
        "29": "\/**",
        "30": "* Handle an incoming request.",
        "31": "*",
        "32": "* @param  \\Illuminate\\Http\\Request  $request",
        "33": "* @param  \\Closure  $next",
        "34": "* @return mixed",
        "35": "*\/",
        "36": "public function handle($request, Closure $next)",
        "37": "{",
        "38": "try {",
        "39": "$this->router->substituteBindings($route = $request->route());",
        "40": null,
        "41": "$this->router->substituteImplicitBindings($route);",
        "42": "} catch (ModelNotFoundException $exception) {",
        "43": "if ($route->getMissing()) {",
        "44": "return $route->getMissing()($request, $exception);",
        "45": "}",
        "46": null,
        "47": "throw $exception;",
        "48": "}",
        "49": null,
        "50": "return $next($request);",
        "51": "}",
        "52": "}",
        "53": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/VerifyCsrfToken.php",
      "line_number": 78,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
      "code_snippet": {
        "63": "*",
        "64": "* @param  \\Illuminate\\Http\\Request  $request",
        "65": "* @param  \\Closure  $next",
        "66": "* @return mixed",
        "67": "*",
        "68": "* @throws \\Illuminate\\Session\\TokenMismatchException",
        "69": "*\/",
        "70": "public function handle($request, Closure $next)",
        "71": "{",
        "72": "if (",
        "73": "$this->isReading($request) ||",
        "74": "$this->runningUnitTests() ||",
        "75": "$this->inExceptArray($request) ||",
        "76": "$this->tokensMatch($request)",
        "77": ") {",
        "78": "return tap($next($request), function ($response) use ($request) {",
        "79": "if ($this->shouldAddXsrfTokenCookie()) {",
        "80": "$this->addCookieToResponse($request, $response);",
        "81": "}",
        "82": "});",
        "83": "}",
        "84": null,
        "85": "throw new TokenMismatchException('CSRF token mismatch.');",
        "86": "}",
        "87": null,
        "88": "\/**",
        "89": "* Determine if the HTTP request uses a \u2018read\u2019 verb.",
        "90": "*",
        "91": "* @param  \\Illuminate\\Http\\Request  $request",
        "92": "* @return bool"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/View\/Middleware\/ShareErrorsFromSession.php",
      "line_number": 49,
      "method": "handle",
      "class": "Illuminate\\View\\Middleware\\ShareErrorsFromSession",
      "code_snippet": {
        "23": "*\/",
        "24": "public function __construct(ViewFactory $view)",
        "25": "{",
        "26": "$this->view = $view;",
        "27": "}",
        "28": null,
        "29": "\/**",
        "30": "* Handle an incoming request.",
        "31": "*",
        "32": "* @param  \\Illuminate\\Http\\Request  $request",
        "33": "* @param  \\Closure  $next",
        "34": "* @return mixed",
        "35": "*\/",
        "36": "public function handle($request, Closure $next)",
        "37": "{",
        "38": "\/\/ If the current session has an \"errors\" variable bound to it, we will share",
        "39": "\/\/ its value with all view instances so the views can easily access errors",
        "40": "\/\/ without having to bind. An empty bag is set when there aren't errors.",
        "41": "$this->view->share(",
        "42": "'errors', $request->session()->get('errors') ?: new ViewErrorBag",
        "43": ");",
        "44": null,
        "45": "\/\/ Putting the errors in the view for every view allows the developer to just",
        "46": "\/\/ assume that some errors are always available, which is convenient since",
        "47": "\/\/ they don't have to continually run checks for the presence of errors.",
        "48": null,
        "49": "return $next($request);",
        "50": "}",
        "51": "}",
        "52": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Session\/Middleware\/StartSession.php",
      "line_number": 121,
      "method": "handleStatefulRequest",
      "class": "Illuminate\\Session\\Middleware\\StartSession",
      "code_snippet": {
        "106": "* @param  \\Illuminate\\Contracts\\Session\\Session  $session",
        "107": "* @param  \\Closure  $next",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "protected function handleStatefulRequest(Request $request, $session, Closure $next)",
        "111": "{",
        "112": "\/\/ If a session driver has been configured, we will need to start the session here",
        "113": "\/\/ so that the data is ready for an application. Note that the Laravel sessions",
        "114": "\/\/ do not make use of PHP \"native\" sessions in any way since they are crappy.",
        "115": "$request->setLaravelSession(",
        "116": "$this->startSession($request, $session)",
        "117": ");",
        "118": null,
        "119": "$this->collectGarbage($session);",
        "120": null,
        "121": "$response = $next($request);",
        "122": null,
        "123": "$this->storeCurrentUrl($request, $session);",
        "124": null,
        "125": "$this->addCookieToResponse($response, $session);",
        "126": null,
        "127": "\/\/ Again, if the session has been configured we will need to close out the session",
        "128": "\/\/ so that the attributes may be persisted to some storage medium. We will also",
        "129": "\/\/ add the session identifier cookie to the application response headers now.",
        "130": "$this->saveSession($request);",
        "131": null,
        "132": "return $response;",
        "133": "}",
        "134": null,
        "135": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Session\/Middleware\/StartSession.php",
      "line_number": 64,
      "method": "handle",
      "class": "Illuminate\\Session\\Middleware\\StartSession",
      "code_snippet": {
        "49": "* @return mixed",
        "50": "*\/",
        "51": "public function handle($request, Closure $next)",
        "52": "{",
        "53": "if (! $this->sessionConfigured()) {",
        "54": "return $next($request);",
        "55": "}",
        "56": null,
        "57": "$session = $this->getSession($request);",
        "58": null,
        "59": "if ($this->manager->shouldBlock() ||",
        "60": "($request->route() instanceof Route && $request->route()->locksFor())) {",
        "61": "return $this->handleRequestWhileBlocking($request, $session, $next);",
        "62": "}",
        "63": null,
        "64": "return $this->handleStatefulRequest($request, $session, $next);",
        "65": "}",
        "66": null,
        "67": "\/**",
        "68": "* Handle the given request within session state.",
        "69": "*",
        "70": "* @param  \\Illuminate\\Http\\Request  $request",
        "71": "* @param  \\Illuminate\\Contracts\\Session\\Session  $session",
        "72": "* @param  \\Closure  $next",
        "73": "* @return mixed",
        "74": "*\/",
        "75": "protected function handleRequestWhileBlocking(Request $request, $session, Closure $next)",
        "76": "{",
        "77": "if (! $request->route() instanceof Route) {",
        "78": "return;"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Cookie\/Middleware\/AddQueuedCookiesToResponse.php",
      "line_number": 37,
      "method": "handle",
      "class": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse",
      "code_snippet": {
        "17": "\/**",
        "18": "* Create a new CookieQueue instance.",
        "19": "*",
        "20": "* @param  \\Illuminate\\Contracts\\Cookie\\QueueingFactory  $cookies",
        "21": "* @return void",
        "22": "*\/",
        "23": "public function __construct(CookieJar $cookies)",
        "24": "{",
        "25": "$this->cookies = $cookies;",
        "26": "}",
        "27": null,
        "28": "\/**",
        "29": "* Handle an incoming request.",
        "30": "*",
        "31": "* @param  \\Illuminate\\Http\\Request  $request",
        "32": "* @param  \\Closure  $next",
        "33": "* @return mixed",
        "34": "*\/",
        "35": "public function handle($request, Closure $next)",
        "36": "{",
        "37": "$response = $next($request);",
        "38": null,
        "39": "foreach ($this->cookies->getQueuedCookies() as $cookie) {",
        "40": "$response->headers->setCookie($cookie);",
        "41": "}",
        "42": null,
        "43": "return $response;",
        "44": "}",
        "45": "}",
        "46": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Cookie\/Middleware\/EncryptCookies.php",
      "line_number": 67,
      "method": "handle",
      "class": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
      "code_snippet": {
        "52": "*\/",
        "53": "public function disableFor($name)",
        "54": "{",
        "55": "$this->except = array_merge($this->except, (array) $name);",
        "56": "}",
        "57": null,
        "58": "\/**",
        "59": "* Handle an incoming request.",
        "60": "*",
        "61": "* @param  \\Illuminate\\Http\\Request  $request",
        "62": "* @param  \\Closure  $next",
        "63": "* @return \\Symfony\\Component\\HttpFoundation\\Response",
        "64": "*\/",
        "65": "public function handle($request, Closure $next)",
        "66": "{",
        "67": "return $this->encrypt($next($this->decrypt($request)));",
        "68": "}",
        "69": null,
        "70": "\/**",
        "71": "* Decrypt the cookies on the request.",
        "72": "*",
        "73": "* @param  \\Symfony\\Component\\HttpFoundation\\Request  $request",
        "74": "* @return \\Symfony\\Component\\HttpFoundation\\Request",
        "75": "*\/",
        "76": "protected function decrypt(Request $request)",
        "77": "{",
        "78": "foreach ($request->cookies as $key => $cookie) {",
        "79": "if ($this->isDisabled($key)) {",
        "80": "continue;",
        "81": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 116,
      "method": "then",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "101": "return $this;",
        "102": "}",
        "103": null,
        "104": "\/**",
        "105": "* Run the pipeline with a final destination callback.",
        "106": "*",
        "107": "* @param  \\Closure  $destination",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "public function then(Closure $destination)",
        "111": "{",
        "112": "$pipeline = array_reduce(",
        "113": "array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
        "114": ");",
        "115": null,
        "116": "return $pipeline($this->passable);",
        "117": "}",
        "118": null,
        "119": "\/**",
        "120": "* Run the pipeline and return the result.",
        "121": "*",
        "122": "* @return mixed",
        "123": "*\/",
        "124": "public function thenReturn()",
        "125": "{",
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
      "line_number": 726,
      "method": "runRouteWithinStack",
      "class": "Illuminate\\Routing\\Router",
      "code_snippet": {
        "711": "* @param  \\Illuminate\\Http\\Request  $request",
        "712": "* @return mixed",
        "713": "*\/",
        "714": "protected function runRouteWithinStack(Route $route, Request $request)",
        "715": "{",
        "716": "$shouldSkipMiddleware = $this->container->bound('middleware.disable') &&",
        "717": "$this->container->make('middleware.disable') === true;",
        "718": null,
        "719": "$middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);",
        "720": null,
        "721": "return (new Pipeline($this->container))",
        "722": "->send($request)",
        "723": "->through($middleware)",
        "724": "->then(fn ($request) => $this->prepareResponse(",
        "725": "$request, $route->run()",
        "726": "));",
        "727": "}",
        "728": null,
        "729": "\/**",
        "730": "* Gather the middleware for the given route with resolved class names.",
        "731": "*",
        "732": "* @param  \\Illuminate\\Routing\\Route  $route",
        "733": "* @return array",
        "734": "*\/",
        "735": "public function gatherRouteMiddleware(Route $route)",
        "736": "{",
        "737": "return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware());",
        "738": "}",
        "739": null,
        "740": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
      "line_number": 703,
      "method": "runRoute",
      "class": "Illuminate\\Routing\\Router",
      "code_snippet": {
        "688": null,
        "689": "\/**",
        "690": "* Return the response for the given route.",
        "691": "*",
        "692": "* @param  \\Illuminate\\Http\\Request  $request",
        "693": "* @param  \\Illuminate\\Routing\\Route  $route",
        "694": "* @return \\Symfony\\Component\\HttpFoundation\\Response",
        "695": "*\/",
        "696": "protected function runRoute(Request $request, Route $route)",
        "697": "{",
        "698": "$request->setRouteResolver(fn () => $route);",
        "699": null,
        "700": "$this->events->dispatch(new RouteMatched($route, $request));",
        "701": null,
        "702": "return $this->prepareResponse($request,",
        "703": "$this->runRouteWithinStack($route, $request)",
        "704": ");",
        "705": "}",
        "706": null,
        "707": "\/**",
        "708": "* Run the given route within a Stack \"onion\" instance.",
        "709": "*",
        "710": "* @param  \\Illuminate\\Routing\\Route  $route",
        "711": "* @param  \\Illuminate\\Http\\Request  $request",
        "712": "* @return mixed",
        "713": "*\/",
        "714": "protected function runRouteWithinStack(Route $route, Request $request)",
        "715": "{",
        "716": "$shouldSkipMiddleware = $this->container->bound('middleware.disable') &&",
        "717": "$this->container->make('middleware.disable') === true;"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
      "line_number": 667,
      "method": "dispatchToRoute",
      "class": "Illuminate\\Routing\\Router",
      "code_snippet": {
        "652": "public function dispatch(Request $request)",
        "653": "{",
        "654": "$this->currentRequest = $request;",
        "655": null,
        "656": "return $this->dispatchToRoute($request);",
        "657": "}",
        "658": null,
        "659": "\/**",
        "660": "* Dispatch the request to a route and return the response.",
        "661": "*",
        "662": "* @param  \\Illuminate\\Http\\Request  $request",
        "663": "* @return \\Symfony\\Component\\HttpFoundation\\Response",
        "664": "*\/",
        "665": "public function dispatchToRoute(Request $request)",
        "666": "{",
        "667": "return $this->runRoute($request, $this->findRoute($request));",
        "668": "}",
        "669": null,
        "670": "\/**",
        "671": "* Find the route matching a given request.",
        "672": "*",
        "673": "* @param  \\Illuminate\\Http\\Request  $request",
        "674": "* @return \\Illuminate\\Routing\\Route",
        "675": "*\/",
        "676": "protected function findRoute($request)",
        "677": "{",
        "678": "$this->events->dispatch(new Routing($request));",
        "679": null,
        "680": "$this->current = $route = $this->routes->match($request);",
        "681": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
      "line_number": 656,
      "method": "dispatch",
      "class": "Illuminate\\Routing\\Router",
      "code_snippet": {
        "641": "$route = tap($this->routes->getByName($name))->bind($this->currentRequest);",
        "642": null,
        "643": "return $this->runRoute($this->currentRequest, $route);",
        "644": "}",
        "645": null,
        "646": "\/**",
        "647": "* Dispatch the request to the application.",
        "648": "*",
        "649": "* @param  \\Illuminate\\Http\\Request  $request",
        "650": "* @return \\Symfony\\Component\\HttpFoundation\\Response",
        "651": "*\/",
        "652": "public function dispatch(Request $request)",
        "653": "{",
        "654": "$this->currentRequest = $request;",
        "655": null,
        "656": "return $this->dispatchToRoute($request);",
        "657": "}",
        "658": null,
        "659": "\/**",
        "660": "* Dispatch the request to a route and return the response.",
        "661": "*",
        "662": "* @param  \\Illuminate\\Http\\Request  $request",
        "663": "* @return \\Symfony\\Component\\HttpFoundation\\Response",
        "664": "*\/",
        "665": "public function dispatchToRoute(Request $request)",
        "666": "{",
        "667": "return $this->runRoute($request, $this->findRoute($request));",
        "668": "}",
        "669": null,
        "670": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php",
      "line_number": 167,
      "method": "Illuminate\\Foundation\\Http\\{closure}",
      "class": "Illuminate\\Foundation\\Http\\Kernel",
      "code_snippet": {
        "152": "if (! $this->app->hasBeenBootstrapped()) {",
        "153": "$this->app->bootstrapWith($this->bootstrappers());",
        "154": "}",
        "155": "}",
        "156": null,
        "157": "\/**",
        "158": "* Get the route dispatcher callback.",
        "159": "*",
        "160": "* @return \\Closure",
        "161": "*\/",
        "162": "protected function dispatchToRouter()",
        "163": "{",
        "164": "return function ($request) {",
        "165": "$this->app->instance('request', $request);",
        "166": null,
        "167": "return $this->router->dispatch($request);",
        "168": "};",
        "169": "}",
        "170": null,
        "171": "\/**",
        "172": "* Call the terminate method on any terminable middleware.",
        "173": "*",
        "174": "* @param  \\Illuminate\\Http\\Request  $request",
        "175": "* @param  \\Illuminate\\Http\\Response  $response",
        "176": "* @return void",
        "177": "*\/",
        "178": "public function terminate($request, $response)",
        "179": "{",
        "180": "$this->terminateMiddleware($request, $response);",
        "181": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 141,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null,
        "131": "\/**",
        "132": "* Get the final piece of the Closure onion.",
        "133": "*",
        "134": "* @param  \\Closure  $destination",
        "135": "* @return \\Closure",
        "136": "*\/",
        "137": "protected function prepareDestination(Closure $destination)",
        "138": "{",
        "139": "return function ($passable) use ($destination) {",
        "140": "try {",
        "141": "return $destination($passable);",
        "142": "} catch (Throwable $e) {",
        "143": "return $this->handleException($passable, $e);",
        "144": "}",
        "145": "};",
        "146": "}",
        "147": null,
        "148": "\/**",
        "149": "* Get a Closure that represents a slice of the application onion.",
        "150": "*",
        "151": "* @return \\Closure",
        "152": "*\/",
        "153": "protected function carry()",
        "154": "{",
        "155": "return function ($stack, $pipe) {"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/barryvdh\/laravel-debugbar\/src\/Middleware\/InjectDebugbar.php",
      "line_number": 67,
      "method": "handle",
      "class": "Barryvdh\\Debugbar\\Middleware\\InjectDebugbar",
      "code_snippet": {
        "52": "*",
        "53": "* @param  Request  $request",
        "54": "* @param  Closure  $next",
        "55": "* @return mixed",
        "56": "*\/",
        "57": "public function handle($request, Closure $next)",
        "58": "{",
        "59": "if (!$this->debugbar->isEnabled() || $this->inExceptArray($request)) {",
        "60": "return $next($request);",
        "61": "}",
        "62": null,
        "63": "$this->debugbar->boot();",
        "64": null,
        "65": "try {",
        "66": "\/** @var \\Illuminate\\Http\\Response $response *\/",
        "67": "$response = $next($request);",
        "68": "} catch (Exception $e) {",
        "69": "$response = $this->handleException($request, $e);",
        "70": "} catch (Error $error) {",
        "71": "$e = new FatalThrowableError($error);",
        "72": "$response = $this->handleException($request, $e);",
        "73": "}",
        "74": null,
        "75": "\/\/ Modify the response to add the Debugbar",
        "76": "$this->debugbar->modifyResponse($request, $response);",
        "77": null,
        "78": "return $response;",
        "79": "}",
        "80": null,
        "81": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TransformsRequest.php",
      "line_number": 21,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
      "code_snippet": {
        "6": "use Symfony\\Component\\HttpFoundation\\ParameterBag;",
        "7": null,
        "8": "class TransformsRequest",
        "9": "{",
        "10": "\/**",
        "11": "* Handle an incoming request.",
        "12": "*",
        "13": "* @param  \\Illuminate\\Http\\Request  $request",
        "14": "* @param  \\Closure  $next",
        "15": "* @return mixed",
        "16": "*\/",
        "17": "public function handle($request, Closure $next)",
        "18": "{",
        "19": "$this->clean($request);",
        "20": null,
        "21": "return $next($request);",
        "22": "}",
        "23": null,
        "24": "\/**",
        "25": "* Clean the request's data.",
        "26": "*",
        "27": "* @param  \\Illuminate\\Http\\Request  $request",
        "28": "* @return void",
        "29": "*\/",
        "30": "protected function clean($request)",
        "31": "{",
        "32": "$this->cleanParameterBag($request->query);",
        "33": null,
        "34": "if ($request->isJson()) {",
        "35": "$this->cleanParameterBag($request->json());"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/ConvertEmptyStringsToNull.php",
      "line_number": 31,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull",
      "code_snippet": {
        "16": "\/**",
        "17": "* Handle an incoming request.",
        "18": "*",
        "19": "* @param  \\Illuminate\\Http\\Request  $request",
        "20": "* @param  \\Closure  $next",
        "21": "* @return mixed",
        "22": "*\/",
        "23": "public function handle($request, Closure $next)",
        "24": "{",
        "25": "foreach (static::$skipCallbacks as $callback) {",
        "26": "if ($callback($request)) {",
        "27": "return $next($request);",
        "28": "}",
        "29": "}",
        "30": null,
        "31": "return parent::handle($request, $next);",
        "32": "}",
        "33": null,
        "34": "\/**",
        "35": "* Transform the given value.",
        "36": "*",
        "37": "* @param  string  $key",
        "38": "* @param  mixed  $value",
        "39": "* @return mixed",
        "40": "*\/",
        "41": "protected function transform($key, $value)",
        "42": "{",
        "43": "return $value === '' ? null : $value;",
        "44": "}",
        "45": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TransformsRequest.php",
      "line_number": 21,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
      "code_snippet": {
        "6": "use Symfony\\Component\\HttpFoundation\\ParameterBag;",
        "7": null,
        "8": "class TransformsRequest",
        "9": "{",
        "10": "\/**",
        "11": "* Handle an incoming request.",
        "12": "*",
        "13": "* @param  \\Illuminate\\Http\\Request  $request",
        "14": "* @param  \\Closure  $next",
        "15": "* @return mixed",
        "16": "*\/",
        "17": "public function handle($request, Closure $next)",
        "18": "{",
        "19": "$this->clean($request);",
        "20": null,
        "21": "return $next($request);",
        "22": "}",
        "23": null,
        "24": "\/**",
        "25": "* Clean the request's data.",
        "26": "*",
        "27": "* @param  \\Illuminate\\Http\\Request  $request",
        "28": "* @return void",
        "29": "*\/",
        "30": "protected function clean($request)",
        "31": "{",
        "32": "$this->cleanParameterBag($request->query);",
        "33": null,
        "34": "if ($request->isJson()) {",
        "35": "$this->cleanParameterBag($request->json());"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TrimStrings.php",
      "line_number": 40,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\TrimStrings",
      "code_snippet": {
        "25": "\/**",
        "26": "* Handle an incoming request.",
        "27": "*",
        "28": "* @param  \\Illuminate\\Http\\Request  $request",
        "29": "* @param  \\Closure  $next",
        "30": "* @return mixed",
        "31": "*\/",
        "32": "public function handle($request, Closure $next)",
        "33": "{",
        "34": "foreach (static::$skipCallbacks as $callback) {",
        "35": "if ($callback($request)) {",
        "36": "return $next($request);",
        "37": "}",
        "38": "}",
        "39": null,
        "40": "return parent::handle($request, $next);",
        "41": "}",
        "42": null,
        "43": "\/**",
        "44": "* Transform the given value.",
        "45": "*",
        "46": "* @param  string  $key",
        "47": "* @param  mixed  $value",
        "48": "* @return mixed",
        "49": "*\/",
        "50": "protected function transform($key, $value)",
        "51": "{",
        "52": "if (in_array($key, $this->except, true) || ! is_string($value)) {",
        "53": "return $value;",
        "54": "}"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/ValidatePostSize.php",
      "line_number": 27,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize",
      "code_snippet": {
        "12": "*",
        "13": "* @param  \\Illuminate\\Http\\Request  $request",
        "14": "* @param  \\Closure  $next",
        "15": "* @return mixed",
        "16": "*",
        "17": "* @throws \\Illuminate\\Http\\Exceptions\\PostTooLargeException",
        "18": "*\/",
        "19": "public function handle($request, Closure $next)",
        "20": "{",
        "21": "$max = $this->getPostMaxSize();",
        "22": null,
        "23": "if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) {",
        "24": "throw new PostTooLargeException;",
        "25": "}",
        "26": null,
        "27": "return $next($request);",
        "28": "}",
        "29": null,
        "30": "\/**",
        "31": "* Determine the server 'post_max_size' as bytes.",
        "32": "*",
        "33": "* @return int",
        "34": "*\/",
        "35": "protected function getPostMaxSize()",
        "36": "{",
        "37": "if (is_numeric($postMaxSize = ini_get('post_max_size'))) {",
        "38": "return (int) $postMaxSize;",
        "39": "}",
        "40": null,
        "41": "$metric = strtoupper(substr($postMaxSize, -1));"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/PreventRequestsDuringMaintenance.php",
      "line_number": 86,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
      "code_snippet": {
        "71": "return response(",
        "72": "$data['template'],",
        "73": "$data['status'] ?? 503,",
        "74": "$this->getHeaders($data)",
        "75": ");",
        "76": "}",
        "77": null,
        "78": "throw new HttpException(",
        "79": "$data['status'] ?? 503,",
        "80": "'Service Unavailable',",
        "81": "null,",
        "82": "$this->getHeaders($data)",
        "83": ");",
        "84": "}",
        "85": null,
        "86": "return $next($request);",
        "87": "}",
        "88": null,
        "89": "\/**",
        "90": "* Determine if the incoming request has a maintenance mode bypass cookie.",
        "91": "*",
        "92": "* @param  \\Illuminate\\Http\\Request  $request",
        "93": "* @param  array  $data",
        "94": "* @return bool",
        "95": "*\/",
        "96": "protected function hasValidBypassCookie($request, array $data)",
        "97": "{",
        "98": "return isset($data['secret']) &&",
        "99": "$request->cookie('laravel_maintenance') &&",
        "100": "MaintenanceModeBypassCookie::isValid("
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Http\/Middleware\/HandleCors.php",
      "line_number": 49,
      "method": "handle",
      "class": "Illuminate\\Http\\Middleware\\HandleCors",
      "code_snippet": {
        "34": "{",
        "35": "$this->container = $container;",
        "36": "$this->cors = $cors;",
        "37": "}",
        "38": null,
        "39": "\/**",
        "40": "* Handle the incoming request.",
        "41": "*",
        "42": "* @param  \\Illuminate\\Http\\Request  $request",
        "43": "* @param  \\Closure  $next",
        "44": "* @return \\Illuminate\\Http\\Response",
        "45": "*\/",
        "46": "public function handle($request, Closure $next)",
        "47": "{",
        "48": "if (! $this->hasMatchingPath($request)) {",
        "49": "return $next($request);",
        "50": "}",
        "51": null,
        "52": "$this->cors->setOptions($this->container['config']->get('cors', []));",
        "53": null,
        "54": "if ($this->cors->isPreflightRequest($request)) {",
        "55": "$response = $this->cors->handlePreflightRequest($request);",
        "56": null,
        "57": "$this->cors->varyHeader($response, 'Access-Control-Request-Method');",
        "58": null,
        "59": "return $response;",
        "60": "}",
        "61": null,
        "62": "$response = $next($request);",
        "63": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Http\/Middleware\/TrustProxies.php",
      "line_number": 39,
      "method": "handle",
      "class": "Illuminate\\Http\\Middleware\\TrustProxies",
      "code_snippet": {
        "24": "\/**",
        "25": "* Handle an incoming request.",
        "26": "*",
        "27": "* @param  \\Illuminate\\Http\\Request  $request",
        "28": "* @param  \\Closure  $next",
        "29": "* @return mixed",
        "30": "*",
        "31": "* @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException",
        "32": "*\/",
        "33": "public function handle(Request $request, Closure $next)",
        "34": "{",
        "35": "$request::setTrustedProxies([], $this->getTrustedHeaderNames());",
        "36": null,
        "37": "$this->setTrustedProxyIpAddresses($request);",
        "38": null,
        "39": "return $next($request);",
        "40": "}",
        "41": null,
        "42": "\/**",
        "43": "* Sets the trusted proxies on the request.",
        "44": "*",
        "45": "* @param  \\Illuminate\\Http\\Request  $request",
        "46": "* @return void",
        "47": "*\/",
        "48": "protected function setTrustedProxyIpAddresses(Request $request)",
        "49": "{",
        "50": "$trustedIps = $this->proxies() ?: config('trustedproxy.proxies');",
        "51": null,
        "52": "if ($trustedIps === '*' || $trustedIps === '**') {",
        "53": "return $this->setTrustedProxyIpAddressesToTheCallingIp($request);"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 180,
      "method": "Illuminate\\Pipeline\\{closure}",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "165": null,
        "166": "\/\/ If the pipe is a string we will parse the string and resolve the class out",
        "167": "\/\/ of the dependency injection container. We can then build a callable and",
        "168": "\/\/ execute the pipe function giving in the parameters that are required.",
        "169": "$pipe = $this->getContainer()->make($name);",
        "170": null,
        "171": "$parameters = array_merge([$passable, $stack], $parameters);",
        "172": "} else {",
        "173": "\/\/ If the pipe is already an object we'll just make a callable and pass it to",
        "174": "\/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
        "175": "\/\/ since the object we're given was already a fully instantiated object.",
        "176": "$parameters = [$passable, $stack];",
        "177": "}",
        "178": null,
        "179": "$carry = method_exists($pipe, $this->method)",
        "180": "? $pipe->{$this->method}(...$parameters)",
        "181": ": $pipe(...$parameters);",
        "182": null,
        "183": "return $this->handleCarry($carry);",
        "184": "} catch (Throwable $e) {",
        "185": "return $this->handleException($passable, $e);",
        "186": "}",
        "187": "};",
        "188": "};",
        "189": "}",
        "190": null,
        "191": "\/**",
        "192": "* Parse full pipe string to get name and parameters.",
        "193": "*",
        "194": "* @param  string  $pipe"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
      "line_number": 116,
      "method": "then",
      "class": "Illuminate\\Pipeline\\Pipeline",
      "code_snippet": {
        "101": "return $this;",
        "102": "}",
        "103": null,
        "104": "\/**",
        "105": "* Run the pipeline with a final destination callback.",
        "106": "*",
        "107": "* @param  \\Closure  $destination",
        "108": "* @return mixed",
        "109": "*\/",
        "110": "public function then(Closure $destination)",
        "111": "{",
        "112": "$pipeline = array_reduce(",
        "113": "array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
        "114": ");",
        "115": null,
        "116": "return $pipeline($this->passable);",
        "117": "}",
        "118": null,
        "119": "\/**",
        "120": "* Run the pipeline and return the result.",
        "121": "*",
        "122": "* @return mixed",
        "123": "*\/",
        "124": "public function thenReturn()",
        "125": "{",
        "126": "return $this->then(function ($passable) {",
        "127": "return $passable;",
        "128": "});",
        "129": "}",
        "130": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php",
      "line_number": 142,
      "method": "sendRequestThroughRouter",
      "class": "Illuminate\\Foundation\\Http\\Kernel",
      "code_snippet": {
        "127": "*",
        "128": "* @param  \\Illuminate\\Http\\Request  $request",
        "129": "* @return \\Illuminate\\Http\\Response",
        "130": "*\/",
        "131": "protected function sendRequestThroughRouter($request)",
        "132": "{",
        "133": "$this->app->instance('request', $request);",
        "134": null,
        "135": "Facade::clearResolvedInstance('request');",
        "136": null,
        "137": "$this->bootstrap();",
        "138": null,
        "139": "return (new Pipeline($this->app))",
        "140": "->send($request)",
        "141": "->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)",
        "142": "->then($this->dispatchToRouter());",
        "143": "}",
        "144": null,
        "145": "\/**",
        "146": "* Bootstrap the application for HTTP requests.",
        "147": "*",
        "148": "* @return void",
        "149": "*\/",
        "150": "public function bootstrap()",
        "151": "{",
        "152": "if (! $this->app->hasBeenBootstrapped()) {",
        "153": "$this->app->bootstrapWith($this->bootstrappers());",
        "154": "}",
        "155": "}",
        "156": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php",
      "line_number": 111,
      "method": "handle",
      "class": "Illuminate\\Foundation\\Http\\Kernel",
      "code_snippet": {
        "96": null,
        "97": "$this->syncMiddlewareToRouter();",
        "98": "}",
        "99": null,
        "100": "\/**",
        "101": "* Handle an incoming HTTP request.",
        "102": "*",
        "103": "* @param  \\Illuminate\\Http\\Request  $request",
        "104": "* @return \\Illuminate\\Http\\Response",
        "105": "*\/",
        "106": "public function handle($request)",
        "107": "{",
        "108": "try {",
        "109": "$request->enableHttpMethodParameterOverride();",
        "110": null,
        "111": "$response = $this->sendRequestThroughRouter($request);",
        "112": "} catch (Throwable $e) {",
        "113": "$this->reportException($e);",
        "114": null,
        "115": "$response = $this->renderException($request, $e);",
        "116": "}",
        "117": null,
        "118": "$this->app['events']->dispatch(",
        "119": "new RequestHandled($request, $response)",
        "120": ");",
        "121": null,
        "122": "return $response;",
        "123": "}",
        "124": null,
        "125": "\/**"
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/public\/index.php",
      "line_number": 52,
      "method": "require_once",
      "class": null,
      "code_snippet": {
        "27": "|",
        "28": "| Composer provides a convenient, automatically generated class loader for",
        "29": "| this application. We just need to utilize it! We'll simply require it",
        "30": "| into the script here so we don't need to manually load our classes.",
        "31": "|",
        "32": "*\/",
        "33": null,
        "34": "require __DIR__.'\/..\/vendor\/autoload.php';",
        "35": null,
        "36": "\/*",
        "37": "|--------------------------------------------------------------------------",
        "38": "| Run The Application",
        "39": "|--------------------------------------------------------------------------",
        "40": "|",
        "41": "| Once we have the application, we can handle the incoming request using",
        "42": "| the application's HTTP kernel. Then, we will send the response back",
        "43": "| to this client's browser, allowing them to enjoy our application.",
        "44": "|",
        "45": "*\/",
        "46": null,
        "47": "$app = require_once __DIR__.'\/..\/bootstrap\/app.php';",
        "48": null,
        "49": "$kernel = $app->make(Kernel::class);",
        "50": null,
        "51": "$response = $kernel->handle(",
        "52": "$request = Request::capture()",
        "53": ")->send();",
        "54": null,
        "55": "$kernel->terminate($request, $response);",
        "56": null
      },
      "application_frame": true
    },
    {
      "file": "\/home\/alex\/Code\/open-flare\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/resources\/server.php",
      "line_number": 16,
      "method": "[top]",
      "class": null,
      "code_snippet": {
        "1": "<?php",
        "2": null,
        "3": "$publicPath = getcwd();",
        "4": null,
        "5": "$uri = urldecode(",
        "6": "parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH) ?? ''",
        "7": ");",
        "8": null,
        "9": "\/\/ This file allows us to emulate Apache's \"mod_rewrite\" functionality from the",
        "10": "\/\/ built-in PHP web server. This provides a convenient way to test a Laravel",
        "11": "\/\/ application without having installed a \"real\" web server software here.",
        "12": "if ($uri !== '\/' && file_exists($publicPath.$uri)) {",
        "13": "return false;",
        "14": "}",
        "15": null,
        "16": "require_once $publicPath.'\/index.php';",
        "17": null
      },
      "application_frame": false
    }
  ],
  "context": {
    "request": {
      "url": "http:\/\/127.0.0.1:8000\/job",
      "ip": null,
      "method": "GET",
      "useragent": "Mozilla\/5.0 (X11; Linux x86_64; rv:101.0) Gecko\/20100101 Firefox\/101.0"
    },
    "request_data": {
      "queryString": [],
      "body": [],
      "files": []
    },
    "headers": {
      "host": "127.0.0.1:8000",
      "user-agent": "Mozilla\/5.0 (X11; Linux x86_64; rv:101.0) Gecko\/20100101 Firefox\/101.0",
      "accept": "text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/avif,image\/webp,*\/*;q=0.8",
      "accept-language": "en-US,en;q=0.5",
      "accept-encoding": "gzip, deflate, br",
      "dnt": "1",
      "connection": "keep-alive",
      "cookie": "XSRF-TOKEN=eyJpdiI6IjlQVU9iMHkxRm5KYms3bEErYlU0MHc9PSIsInZhbHVlIjoiaHdQUVF6TURnbVdLS1h5ZFVkR3h0OFFKWGhUUU5weTZWaStZSnlMd1htMWpiaVFWUm1IZDZydXlwbFIxMitqYXdLRXA3djFxM0k5REhNQk5CVm5JZ3ZkSVNZaDhxTnZLcktBMjBmdFdJSzdWUHY2QkVWS2JRVnBpVS9sVi9TRTMiLCJtYWMiOiIyMmUzN2FhNWU3ZWI0ZmFmMjNkNmQ3OTE5NTAwNzQ5NTQxMDFhODNiYjg2MDhjYmYwNzc2YmI1YjAzNmMxYjhhIiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IktCSTNuWHhqd3ZCZU1DbDNWWTB3N1E9PSIsInZhbHVlIjoiY0hPTjJoMUthaEkraDhNNi84eEQzWWhqMjJEdjhPalJDblFhdjZQUEZZREhDY3BNb0NjQ2wrZ1RHMVNVblpIb3YwZGo4YXRnYUllQmUvclcrWFViRWdVRHZSSFdpeHR0WUVvS054ZUZEQTZZTEI5bjR0UEwwbEQzcGRvZXpHYVQiLCJtYWMiOiI3MjE5ODM4NzJiMDcyNTM3Yzc2OWFjMzJjMWFkOTVhNWM4N2M2N2E5YTA2ZjUzN2NlNTk3YzVhY2I1YjJhNDQyIiwidGFnIjoiIn0%3D",
      "upgrade-insecure-requests": "1",
      "sec-fetch-dest": "document",
      "sec-fetch-mode": "navigate",
      "sec-fetch-site": "none",
      "sec-fetch-user": "?1"
    },
    "cookies": {
      "XSRF-TOKEN": "DhPMaSzrAPFR1z5j8lS3hNp7rshV3GKAs0v5h4d7",
      "laravel_session": "HvnIfatzabMC8VHvItTlAirFEi01yz6GfaNVPI60"
    },
    "session": {
      "_token": "DhPMaSzrAPFR1z5j8lS3hNp7rshV3GKAs0v5h4d7",
      "login_web_59ba36addc2b2f9401580f014c7f58ea4e30989d": 2,
      "test": "123",
      "_previous": {
        "url": "http:\/\/127.0.0.1:8000\/data"
      },
      "_flash": {
        "old": [],
        "new": []
      }
    },
    "route": {
      "route": null,
      "routeParameters": [],
      "controllerAction": "Closure",
      "middleware": [
        "web"
      ]
    },
    "user": {
      "id": 2,
      "name": "Kathlyn Donnelly",
      "email": "jortiz@example.net",
      "email_verified_at": "2022-06-21T20:57:20.000000Z",
      "two_factor_secret": null,
      "two_factor_recovery_codes": null,
      "two_factor_confirmed_at": null,
      "created_at": "2022-06-21T20:57:20.000000Z",
      "updated_at": "2022-06-21T20:57:20.000000Z"
    },
    "env": {
      "php_version": "8.1.7",
      "laravel_version": "9.17.0",
      "laravel_locale": "en",
      "laravel_config_cached": false,
      "app_debug": true,
      "app_env": "local"
    },
    "git": {
      "hash": "d0d0a54f8f115d20df67efcc644bb79bd3437982",
      "message": "COntext added to JSON column",
      "tag": null,
      "remote": "git@github.com:Wulfheart\/open-flare.git",
      "isDirty": true
    },
    "dumps": [],
    "logs": [],
    "queries": [
      {
        "sql": "select * from `users` where `id` = ? limit 1",
        "time": 2.72,
        "connection_name": "mysql",
        "bindings": [
          2
        ],
        "microtime": 1655848477.175953
      }
    ],
    "job": {
      "uuid": "372d7d1f-d89b-4e2f-a21c-56e6553e1f8a",
      "maxTries": null,
      "maxExceptions": null,
      "failOnTimeout": false,
      "backoff": null,
      "timeout": null,
      "retryUntil": null,
      "data": {
        "x": 1,
        "connection": null,
        "queue": null,
        "chainConnection": null,
        "chainQueue": null,
        "chainCatchCallbacks": null,
        "delay": null,
        "afterCommit": null,
        "middleware": [],
        "chained": []
      },
      "name": "App\\Jobs\\TestJob",
      "connection": "sync",
      "queue": "sync"
    }
  },
  "stage": "local",
  "message_level": null,
  "open_frame_index": null,
  "application_path": null,
  "application_version": null,
  "tracking_uuid": "e1345c9f-5d23-42eb-80db-01d5dea067b2"
}